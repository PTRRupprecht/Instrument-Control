function [methodinfo,structs,enuminfo,ThunkLibName]=NIDAQmx_proto
%NIDAQMX_PROTO Create structures to define interfaces found in 'NIDAQmx_mod'.

%This function was generated by loadlibrary.m parser version 1.1.6.33 on Tue Nov  1 19:54:33 2011
%perl options:'NIDAQmx_mod.i -outfile=NIDAQmx_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% int32 _stdcall DAQmxLoadTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.name{fcnNum}='DAQmxLoadTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.name{fcnNum}='DAQmxCreateTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAddGlobalChansToTask ( TaskHandle taskHandle , const char channelNames []); 
fcns.name{fcnNum}='DAQmxAddGlobalChansToTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxStartTask ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxStartTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxStopTask ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxStopTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxClearTask ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxClearTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWaitUntilTaskDone ( TaskHandle taskHandle , float64 timeToWait ); 
fcns.name{fcnNum}='DAQmxWaitUntilTaskDone'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxIsTaskDone ( TaskHandle taskHandle , bool32 * isTaskDone ); 
fcns.name{fcnNum}='DAQmxIsTaskDone'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxTaskControl ( TaskHandle taskHandle , int32 action ); 
fcns.name{fcnNum}='DAQmxTaskControl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetNthTaskChannel ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetNthTaskChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetNthTaskDevice ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetNthTaskDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetTaskAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTaskAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxRegisterEveryNSamplesEvent ( TaskHandle task , int32 everyNsamplesEventType , uInt32 nSamples , uInt32 options , DAQmxEveryNSamplesEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.name{fcnNum}='DAQmxRegisterEveryNSamplesEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxRegisterDoneEvent ( TaskHandle task , uInt32 options , DAQmxDoneEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.name{fcnNum}='DAQmxRegisterDoneEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxRegisterSignalEvent ( TaskHandle task , int32 signalID , uInt32 options , DAQmxSignalEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.name{fcnNum}='DAQmxRegisterSignalEvent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIVoltageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAICurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAICurrentChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIVoltageRMSChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIVoltageRMSChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAICurrentRMSChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAICurrentRMSChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIThrmcplChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 thermocoupleType , int32 cjcSource , float64 cjcVal , const char cjcChannel []); 
fcns.name{fcnNum}='DAQmxCreateAIThrmcplChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIRTDChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 rtdType , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , float64 r0 ); 
fcns.name{fcnNum}='DAQmxCreateAIRTDChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIThrmstrChanIex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , float64 a , float64 b , float64 c ); 
fcns.name{fcnNum}='DAQmxCreateAIThrmstrChanIex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIThrmstrChanVex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 a , float64 b , float64 c , float64 r1 ); 
fcns.name{fcnNum}='DAQmxCreateAIThrmstrChanVex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIFreqVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 thresholdLevel , float64 hysteresis , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIFreqVoltageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIResistanceChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIResistanceChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIStrainGageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 strainConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 gageFactor , float64 initialBridgeVoltage , float64 nominalGageResistance , float64 poissonRatio , float64 leadWireResistance , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIStrainGageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIForceBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIForceBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIForceBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIForceBridgeTableChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIForceBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIForceBridgePolynomialChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPressureBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPressureBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPressureBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPressureBridgeTableChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPressureBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPressureBridgePolynomialChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAITorqueBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAITorqueBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAITorqueBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAITorqueBridgeTableChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAITorqueBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAITorqueBridgePolynomialChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIBridgeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIVoltageChanWithExcit ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , bool32 useExcitForScaling , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIVoltageChanWithExcit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAITempBuiltInSensorChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 units ); 
fcns.name{fcnNum}='DAQmxCreateAITempBuiltInSensorChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIAccelChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIAccelChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIForceIEPEChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIForceIEPEChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIMicrophoneChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , int32 units , float64 micSensitivity , float64 maxSndPressLevel , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIMicrophoneChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPosLVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPosLVDTChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPosRVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPosRVDTChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIPosEddyCurrProxProbeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAIPosEddyCurrProxProbeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAIDeviceTempChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 units ); 
fcns.name{fcnNum}='DAQmxCreateAIDeviceTempChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIVoltageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAICurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAICurrentChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIThrmcplChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 cjcSource , float64 cjcVal , const char cjcChannel []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmcplChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIRTDChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal ); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIRTDChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIThrmstrChanIex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal ); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmstrChanIex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIThrmstrChanVex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 r1 ); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmstrChanVex'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIResistanceChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIResistanceChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIStrainGageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 initialBridgeVoltage , float64 leadWireResistance , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIStrainGageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIForceBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIForceBridgeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIPressureBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIPressureBridgeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAITorqueBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAITorqueBridgeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIBridgeChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIVoltageChanWithExcit ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIVoltageChanWithExcit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIAccelChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIAccelChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIForceIEPEChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIForceIEPEChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIMicrophoneChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , int32 units , float64 maxSndPressLevel , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIMicrophoneChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'long', 'double', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIPosLVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIPosLVDTChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTEDSAIPosRVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateTEDSAIPosRVDTChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAOVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAOVoltageChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAOCurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateAOCurrentChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateAOFuncGenChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 type , float64 freq , float64 amplitude , float64 offset ); 
fcns.name{fcnNum}='DAQmxCreateAOFuncGenChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateDIChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.name{fcnNum}='DAQmxCreateDIChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateDOChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.name{fcnNum}='DAQmxCreateDOChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIFreqChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 edge , int32 measMethod , float64 measTime , uInt32 divisor , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCIFreqChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIPeriodChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 edge , int32 measMethod , float64 measTime , uInt32 divisor , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCIPeriodChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCICountEdgesChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 edge , uInt32 initialCount , int32 countDirection ); 
fcns.name{fcnNum}='DAQmxCreateCICountEdgesChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIPulseWidthChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 startingEdge , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCIPulseWidthChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCISemiPeriodChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCISemiPeriodChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCITwoEdgeSepChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 firstEdge , int32 secondEdge , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCITwoEdgeSepChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIPulseChanFreq ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units ); 
fcns.name{fcnNum}='DAQmxCreateCIPulseChanFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIPulseChanTime ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units ); 
fcns.name{fcnNum}='DAQmxCreateCIPulseChanTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIPulseChanTicks ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], const char sourceTerminal [], float64 minVal , float64 maxVal ); 
fcns.name{fcnNum}='DAQmxCreateCIPulseChanTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCILinEncoderChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 decodingType , bool32 ZidxEnable , float64 ZidxVal , int32 ZidxPhase , int32 units , float64 distPerPulse , float64 initialPos , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCILinEncoderChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'ulong', 'double', 'long', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIAngEncoderChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 decodingType , bool32 ZidxEnable , float64 ZidxVal , int32 ZidxPhase , int32 units , uInt32 pulsesPerRev , float64 initialAngle , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCIAngEncoderChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'ulong', 'double', 'long', 'long', 'ulong', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCIGPSTimestampChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 syncMethod , const char customScaleName []); 
fcns.name{fcnNum}='DAQmxCreateCIGPSTimestampChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCOPulseChanFreq ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 idleState , float64 initialDelay , float64 freq , float64 dutyCycle ); 
fcns.name{fcnNum}='DAQmxCreateCOPulseChanFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCOPulseChanTime ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 idleState , float64 initialDelay , float64 lowTime , float64 highTime ); 
fcns.name{fcnNum}='DAQmxCreateCOPulseChanTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateCOPulseChanTicks ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], const char sourceTerminal [], int32 idleState , int32 initialDelay , int32 lowTicks , int32 highTicks ); 
fcns.name{fcnNum}='DAQmxCreateCOPulseChanTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalCalDate ( TaskHandle taskHandle , const char channelName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalCalDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalCalDate ( TaskHandle taskHandle , const char channelName [], uInt32 year , uInt32 month , uInt32 day , uInt32 hour , uInt32 minute ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalCalDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalExpDate ( TaskHandle taskHandle , const char channelName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalExpDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalExpDate ( TaskHandle taskHandle , const char channelName [], uInt32 year , uInt32 month , uInt32 day , uInt32 hour , uInt32 minute ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalExpDate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 DAQmxGetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetChanAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgSampClkTiming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgHandshakingTiming ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgHandshakingTiming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgBurstHandshakingTimingImportClock ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan , float64 sampleClkRate , const char sampleClkSrc [], int32 sampleClkActiveEdge , int32 pauseWhen , int32 readyEventActiveLevel ); 
fcns.name{fcnNum}='DAQmxCfgBurstHandshakingTimingImportClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'uint64', 'double', 'cstring', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgBurstHandshakingTimingExportClock ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan , float64 sampleClkRate , const char sampleClkOutpTerm [], int32 sampleClkPulsePolarity , int32 pauseWhen , int32 readyEventActiveLevel ); 
fcns.name{fcnNum}='DAQmxCfgBurstHandshakingTimingExportClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'uint64', 'double', 'cstring', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgChangeDetectionTiming ( TaskHandle taskHandle , const char risingEdgeChan [], const char fallingEdgeChan [], int32 sampleMode , uInt64 sampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgChangeDetectionTiming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgImplicitTiming ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgImplicitTiming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgPipelinedSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgPipelinedSampClkTiming'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 DAQmxGetTimingAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTimingAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetTimingAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTimingAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetTimingAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetTimingAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTimingAttributeEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTimingAttributeEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetTimingAttributeEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDisableStartTrig ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxDisableStartTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgDigEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge ); 
fcns.name{fcnNum}='DAQmxCfgDigEdgeStartTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgAnlgEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerSlope , float64 triggerLevel ); 
fcns.name{fcnNum}='DAQmxCfgAnlgEdgeStartTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgAnlgWindowStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerWhen , float64 windowTop , float64 windowBottom ); 
fcns.name{fcnNum}='DAQmxCfgAnlgWindowStartTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgDigPatternStartTrig ( TaskHandle taskHandle , const char triggerSource [], const char triggerPattern [], int32 triggerWhen ); 
fcns.name{fcnNum}='DAQmxCfgDigPatternStartTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDisableRefTrig ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxDisableRefTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgDigEdgeRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge , uInt32 pretriggerSamples ); 
fcns.name{fcnNum}='DAQmxCfgDigEdgeRefTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgAnlgEdgeRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerSlope , float64 triggerLevel , uInt32 pretriggerSamples ); 
fcns.name{fcnNum}='DAQmxCfgAnlgEdgeRefTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgAnlgWindowRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerWhen , float64 windowTop , float64 windowBottom , uInt32 pretriggerSamples ); 
fcns.name{fcnNum}='DAQmxCfgAnlgWindowRefTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'double', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgDigPatternRefTrig ( TaskHandle taskHandle , const char triggerSource [], const char triggerPattern [], int32 triggerWhen , uInt32 pretriggerSamples ); 
fcns.name{fcnNum}='DAQmxCfgDigPatternRefTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDisableAdvTrig ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxDisableAdvTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgDigEdgeAdvTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge ); 
fcns.name{fcnNum}='DAQmxCfgDigEdgeAdvTrig'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetTrigAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTrigAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetTrigAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTrigAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetTrigAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetTrigAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSendSoftwareTrigger ( TaskHandle taskHandle , int32 triggerID ); 
fcns.name{fcnNum}='DAQmxSendSoftwareTrigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadAnalogF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadAnalogScalarF64 ( TaskHandle taskHandle , float64 timeout , float64 * value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadAnalogScalarF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadBinaryI16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'int16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadBinaryU16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadBinaryI32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'longPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadBinaryU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadDigitalU8'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadDigitalU16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadDigitalU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadDigitalScalarU32 ( TaskHandle taskHandle , float64 timeout , uInt32 * value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadDigitalScalarU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInBytes , int32 * sampsPerChanRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadDigitalLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCounterF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCounterF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCounterU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCounterU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCounterScalarF64 ( TaskHandle taskHandle , float64 timeout , float64 * value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCounterScalarF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCounterScalarU32 ( TaskHandle taskHandle , float64 timeout , uInt32 * value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCounterScalarU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrFreq ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , float64 readArrayFrequency [], float64 readArrayDutyCycle [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'doublePtr', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrTime ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , float64 readArrayHighTime [], float64 readArrayLowTime [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'doublePtr', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrTicks ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , uInt32 readArrayHighTicks [], uInt32 readArrayLowTicks [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'ulong', 'ulongPtr', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrFreqScalar ( TaskHandle taskHandle , float64 timeout , float64 * frequency , float64 * dutyCycle , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrFreqScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'doublePtr', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrTimeScalar ( TaskHandle taskHandle , float64 timeout , float64 * highTime , float64 * lowTime , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrTimeScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'doublePtr', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadCtrTicksScalar ( TaskHandle taskHandle , float64 timeout , uInt32 * highTicks , uInt32 * lowTicks , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadCtrTicksScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReadRaw ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , void * readArray , uInt32 arraySizeInBytes , int32 * sampsRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxReadRaw'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'voidPtr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetNthTaskReadChannel ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetNthTaskReadChannel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetReadAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetReadAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetReadAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetReadAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetReadAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxConfigureLogging ( TaskHandle taskHandle , const char filePath [], int32 loggingMode , const char groupName [], int32 operation ); 
fcns.name{fcnNum}='DAQmxConfigureLogging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxStartNewFile ( TaskHandle taskHandle , const char filePath []); 
fcns.name{fcnNum}='DAQmxStartNewFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteAnalogF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteAnalogScalarF64 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteAnalogScalarF64'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteBinaryI16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'int16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteBinaryU16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteBinaryI32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteBinaryU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteDigitalU8'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteDigitalU16'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteDigitalU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteDigitalScalarU32 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , uInt32 value , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteDigitalScalarU32'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteDigitalLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrFreq ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 frequency [], const float64 dutyCycle [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrFreqScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 frequency , float64 dutyCycle , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrFreqScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrTime ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 highTime [], const float64 lowTime [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrTimeScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 highTime , float64 lowTime , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrTimeScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrTicks ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 highTicks [], const uInt32 lowTicks [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteCtrTicksScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , uInt32 highTicks , uInt32 lowTicks , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteCtrTicksScalar'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteRaw ( TaskHandle taskHandle , int32 numSamps , bool32 autoStart , float64 timeout , const void * writeArray , int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.name{fcnNum}='DAQmxWriteRaw'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'ulong', 'double', 'voidPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 DAQmxGetWriteAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetWriteAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetWriteAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetWriteAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetWriteAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxExportSignal ( TaskHandle taskHandle , int32 signalID , const char outputTerminal []); 
fcns.name{fcnNum}='DAQmxExportSignal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 DAQmxGetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetExportedSignalAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetExportedSignalAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetExportedSignalAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateLinScale ( const char name [], float64 slope , float64 yIntercept , int32 preScaledUnits , const char scaledUnits []); 
fcns.name{fcnNum}='DAQmxCreateLinScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateMapScale ( const char name [], float64 prescaledMin , float64 prescaledMax , float64 scaledMin , float64 scaledMax , int32 preScaledUnits , const char scaledUnits []); 
fcns.name{fcnNum}='DAQmxCreateMapScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreatePolynomialScale ( const char name [], const float64 forwardCoeffs [], uInt32 numForwardCoeffsIn , const float64 reverseCoeffs [], uInt32 numReverseCoeffsIn , int32 preScaledUnits , const char scaledUnits []); 
fcns.name{fcnNum}='DAQmxCreatePolynomialScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCreateTableScale ( const char name [], const float64 prescaledVals [], uInt32 numPrescaledValsIn , const float64 scaledVals [], uInt32 numScaledValsIn , int32 preScaledUnits , const char scaledUnits []); 
fcns.name{fcnNum}='DAQmxCreateTableScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCalculateReversePolyCoeff ( const float64 forwardCoeffs [], uInt32 numForwardCoeffsIn , float64 minValX , float64 maxValX , int32 numPointsToCompute , int32 reversePolyOrder , float64 reverseCoeffs []); 
fcns.name{fcnNum}='DAQmxCalculateReversePolyCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'doublePtr', 'ulong', 'double', 'double', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% int32 DAQmxGetScaleAttribute ( const char scaleName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetScaleAttribute ( const char scaleName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgInputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgInputBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCfgOutputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.name{fcnNum}='DAQmxCfgOutputBuffer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 DAQmxGetBufferAttribute ( TaskHandle taskHandle , int32 attribute , void * value ); 
fcns.name{fcnNum}='DAQmxGetBufferAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 DAQmxSetBufferAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetBufferAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetBufferAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetBufferAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchCreateScanList ( const char scanList [], TaskHandle * taskHandle ); 
fcns.name{fcnNum}='DAQmxSwitchCreateScanList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchConnect ( const char switchChannel1 [], const char switchChannel2 [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchConnect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchConnectMulti ( const char connectionList [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchConnectMulti'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchDisconnect ( const char switchChannel1 [], const char switchChannel2 [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchDisconnect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchDisconnectMulti ( const char connectionList [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchDisconnectMulti'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchDisconnectAll ( const char deviceName [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchDisconnectAll'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchSetTopologyAndReset ( const char deviceName [], const char newTopology []); 
fcns.name{fcnNum}='DAQmxSwitchSetTopologyAndReset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchFindPath ( const char switchChannel1 [], const char switchChannel2 [], char path [], uInt32 pathBufferSize , int32 * pathStatus ); 
fcns.name{fcnNum}='DAQmxSwitchFindPath'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchOpenRelays ( const char relayList [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchOpenRelays'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchCloseRelays ( const char relayList [], bool32 waitForSettling ); 
fcns.name{fcnNum}='DAQmxSwitchCloseRelays'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchGetSingleRelayCount ( const char relayName [], uInt32 * count ); 
fcns.name{fcnNum}='DAQmxSwitchGetSingleRelayCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchGetMultiRelayCount ( const char relayList [], uInt32 count [], uInt32 countArraySize , uInt32 * numRelayCountsRead ); 
fcns.name{fcnNum}='DAQmxSwitchGetMultiRelayCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchGetSingleRelayPos ( const char relayName [], uInt32 * relayPos ); 
fcns.name{fcnNum}='DAQmxSwitchGetSingleRelayPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchGetMultiRelayPos ( const char relayList [], uInt32 relayPos [], uInt32 relayPosArraySize , uInt32 * numRelayPossRead ); 
fcns.name{fcnNum}='DAQmxSwitchGetMultiRelayPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSwitchWaitForSettling ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxSwitchWaitForSettling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 DAQmxGetSwitchChanAttribute ( const char switchChannelName [], int32 attribute , void * value ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 DAQmxSetSwitchChanAttribute ( const char switchChannelName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetSwitchDeviceAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetSwitchDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetSwitchDeviceAttribute ( const char deviceName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute , void * value ); 
fcns.name{fcnNum}='DAQmxGetSwitchScanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 DAQmxSetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchScanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetSwitchScanAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxConnectTerms ( const char sourceTerminal [], const char destinationTerminal [], int32 signalModifiers ); 
fcns.name{fcnNum}='DAQmxConnectTerms'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDisconnectTerms ( const char sourceTerminal [], const char destinationTerminal []); 
fcns.name{fcnNum}='DAQmxDisconnectTerms'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxTristateOutputTerm ( const char outputTerminal []); 
fcns.name{fcnNum}='DAQmxTristateOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDevice ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxResetDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSelfTestDevice ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxSelfTestDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 DAQmxGetDeviceAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxCreateWatchdogTimerTask ( const char deviceName [], const char taskName [], TaskHandle * taskHandle , float64 timeout , const char lines [], int32 expState , ...); 
fcns.name{fcnNum}='DAQmxCreateWatchdogTimerTask'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulongPtr', 'double', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxControlWatchdogTask ( TaskHandle taskHandle , int32 action ); 
fcns.name{fcnNum}='DAQmxControlWatchdogTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetWatchdogAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetWatchdogAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetWatchdogAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSelfCal ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxSelfCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxPerformBridgeOffsetNullingCal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxPerformBridgeOffsetNullingCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxPerformBridgeOffsetNullingCalEx ( TaskHandle taskHandle , const char channel [], bool32 skipUnsupportedChannels ); 
fcns.name{fcnNum}='DAQmxPerformBridgeOffsetNullingCalEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxPerformThrmcplLeadOffsetNullingCal ( TaskHandle taskHandle , const char channel [], bool32 skipUnsupportedChannels ); 
fcns.name{fcnNum}='DAQmxPerformThrmcplLeadOffsetNullingCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxPerformStrainShuntCal ( TaskHandle taskHandle , const char channel [], float64 shuntResistorValue , int32 shuntResistorLocation , bool32 skipUnsupportedChannels ); 
fcns.name{fcnNum}='DAQmxPerformStrainShuntCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxPerformBridgeShuntCal ( TaskHandle taskHandle , const char channel [], float64 shuntResistorValue , int32 shuntResistorLocation , float64 bridgeResistance , bool32 skipUnsupportedChannels ); 
fcns.name{fcnNum}='DAQmxPerformBridgeShuntCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'long', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSelfCalLastDateAndTime ( const char deviceName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.name{fcnNum}='DAQmxGetSelfCalLastDateAndTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExtCalLastDateAndTime ( const char deviceName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.name{fcnNum}='DAQmxGetExtCalLastDateAndTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxRestoreLastExtCalConst ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxRestoreLastExtCalConst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxESeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxESeriesCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxMSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxMSeriesCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxSSeriesCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSCBaseboardCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxSCBaseboardCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAOSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxAOSeriesCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxXSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxXSeriesCalAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDeviceSupportsCal ( const char deviceName [], bool32 * calSupported ); 
fcns.name{fcnNum}='DAQmxDeviceSupportsCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 DAQmxGetCalInfoAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetCalInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetCalInfoAttribute ( const char deviceName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetCalInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxInitExtCal ( const char deviceName [], const char password [], CalHandle * calHandle ); 
fcns.name{fcnNum}='DAQmxInitExtCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCloseExtCal ( CalHandle calHandle , int32 action ); 
fcns.name{fcnNum}='DAQmxCloseExtCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxChangeExtCalPassword ( const char deviceName [], const char password [], const char newPassword []); 
fcns.name{fcnNum}='DAQmxChangeExtCalPassword'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjustDSAAICal ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxAdjustDSAAICal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjustDSAAICalEx ( CalHandle calHandle , float64 referenceVoltage , bool32 inputsShorted ); 
fcns.name{fcnNum}='DAQmxAdjustDSAAICalEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjustDSAAICalWithGainAndCoupling ( CalHandle calHandle , int32 coupling , float64 gain , float64 referenceVoltage ); 
fcns.name{fcnNum}='DAQmxAdjustDSAAICalWithGainAndCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjustDSAAOCal ( CalHandle calHandle , uInt32 channel , float64 requestedLowVoltage , float64 actualLowVoltage , float64 requestedHighVoltage , float64 actualHighVoltage , float64 gainSetting ); 
fcns.name{fcnNum}='DAQmxAdjustDSAAOCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjustDSATimebaseCal ( CalHandle calHandle , float64 referenceFrequency ); 
fcns.name{fcnNum}='DAQmxAdjustDSATimebaseCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4204Cal ( CalHandle calHandle , const char channelNames [], float64 lowPassFreq , bool32 trackHoldEnabled , float64 inputVal ); 
fcns.name{fcnNum}='DAQmxAdjust4204Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4220Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.name{fcnNum}='DAQmxAdjust4220Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4224Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.name{fcnNum}='DAQmxAdjust4224Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4225Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.name{fcnNum}='DAQmxAdjust4225Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup433xCal ( CalHandle calHandle , const char channelNames [], float64 excitationVoltage ); 
fcns.name{fcnNum}='DAQmxSetup433xCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust433xCal ( CalHandle calHandle , float64 refVoltage , float64 refExcitation , int32 shuntLocation ); 
fcns.name{fcnNum}='DAQmxAdjust433xCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4300Cal ( CalHandle calHandle , float64 refVoltage ); 
fcns.name{fcnNum}='DAQmxAdjust4300Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust4353Cal ( CalHandle calHandle , const char channelNames [], float64 refVal ); 
fcns.name{fcnNum}='DAQmxAdjust4353Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxConnectSCExpressCalAccChans ( CalHandle calHandle , const char channelNames [], const char connection []); 
fcns.name{fcnNum}='DAQmxConnectSCExpressCalAccChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDisconnectSCExpressCalAccChans ( CalHandle calHandle ); 
fcns.name{fcnNum}='DAQmxDisconnectSCExpressCalAccChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPossibleSCExpressCalAccConnections ( const char deviceName [], const char channelNames [], char * connections , uInt32 connectionsBufferSize ); 
fcns.name{fcnNum}='DAQmxGetPossibleSCExpressCalAccConnections'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSCExpressCalAccBridgeOutput ( CalHandle calHandle , float64 voltsPerVolt ); 
fcns.name{fcnNum}='DAQmxSetSCExpressCalAccBridgeOutput'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9201CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9201CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxCSeriesSetCalTemp ( CalHandle calHandle , float64 temperature ); 
fcns.name{fcnNum}='DAQmxCSeriesSetCalTemp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9201Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9201Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9203CalAdjustPoints ( CalHandle calHandle , float64 rangeMin , float64 rangeMax , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9203CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9203GainCal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9203GainCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9203OffsetCal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax ); 
fcns.name{fcnNum}='DAQmxAdjust9203OffsetCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9205Cal ( CalHandle calHandle , float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9205Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9206Cal ( CalHandle calHandle , float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9206Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9207CalAdjustPoints ( CalHandle calHandle , const char channelNames [], float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9207CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9207GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9207GainCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9207OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.name{fcnNum}='DAQmxAdjust9207OffsetCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9208CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9208CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9208GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9208GainCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9208OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.name{fcnNum}='DAQmxAdjust9208OffsetCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9211Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9211Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9213CalAdjustPoints ( CalHandle calHandle , float64 rangeMin , float64 rangeMax , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9213CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9213Cal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9213Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9214CalAdjustPoints ( CalHandle calHandle , const char channelNames [], float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9214CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9214Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9214Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9215CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9215CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9215Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9215Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9217CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9217CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9217Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9217Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup9219Cal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , int32 measType , int32 bridgeConfig ); 
fcns.name{fcnNum}='DAQmxSetup9219Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'long', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9219CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9219CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9219Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9219Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9221CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9221CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9221Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9221Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9222CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9222CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9222Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9222Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9223CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9223CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9223Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9223Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9225CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9225CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9225Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9225Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9227CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9227CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9227Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9227Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9234CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9234CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9234GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9234GainCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9234OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.name{fcnNum}='DAQmxAdjust9234OffsetCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9263CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9263CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup9263Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.name{fcnNum}='DAQmxSetup9263Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9263Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9263Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9264CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9264CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup9264Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.name{fcnNum}='DAQmxSetup9264Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9264Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9264Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9265CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9265CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup9265Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.name{fcnNum}='DAQmxSetup9265Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9265Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9265Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGet9269CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGet9269CalAdjustPoints'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup9269Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.name{fcnNum}='DAQmxSetup9269Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust9269Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.name{fcnNum}='DAQmxAdjust9269Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1102Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1102Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1102Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1102Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1104Cal ( CalHandle calHandle , const char channelName []); 
fcns.name{fcnNum}='DAQmxSetup1104Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1104Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1104Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1112Cal ( CalHandle calHandle , const char channelName []); 
fcns.name{fcnNum}='DAQmxSetup1112Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1112Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1112Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1122Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1122Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1122Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1122Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1124Cal ( CalHandle calHandle , const char channelName [], int32 range , uInt32 dacValue ); 
fcns.name{fcnNum}='DAQmxSetup1124Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1124Cal ( CalHandle calHandle , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1124Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1125Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1125Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1125Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1125Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1126Cal ( CalHandle calHandle , const char channelName [], float64 upperFreqLimit ); 
fcns.name{fcnNum}='DAQmxSetup1126Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1126Cal ( CalHandle calHandle , float64 refFreq , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1126Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1141Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1141Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1141Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1141Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1142Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1142Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1142Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1142Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1143Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1143Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1143Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1143Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1502Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1502Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1502Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1502Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1503Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1503Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1503Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1503Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1503CurrentCal ( CalHandle calHandle , const char channelName [], float64 measCurrent ); 
fcns.name{fcnNum}='DAQmxAdjust1503CurrentCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1520Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup1520Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1520Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1520Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1521Cal ( CalHandle calHandle , const char channelName []); 
fcns.name{fcnNum}='DAQmxSetup1521Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1521Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust1521Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup153xCal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.name{fcnNum}='DAQmxSetup153xCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust153xCal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.name{fcnNum}='DAQmxAdjust153xCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetup1540Cal ( CalHandle calHandle , const char channelName [], float64 excitationVoltage , float64 excitationFreq ); 
fcns.name{fcnNum}='DAQmxSetup1540Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAdjust1540Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput , int32 inputCalSource ); 
fcns.name{fcnNum}='DAQmxAdjust1540Cal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxConfigureTEDS ( const char physicalChannel [], const char filePath []); 
fcns.name{fcnNum}='DAQmxConfigureTEDS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxClearTEDS ( const char physicalChannel []); 
fcns.name{fcnNum}='DAQmxClearTEDS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteToTEDSFromArray ( const char physicalChannel [], const uInt8 bitStream [], uInt32 arraySize , int32 basicTEDSOptions ); 
fcns.name{fcnNum}='DAQmxWriteToTEDSFromArray'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr', 'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWriteToTEDSFromFile ( const char physicalChannel [], const char filePath [], int32 basicTEDSOptions ); 
fcns.name{fcnNum}='DAQmxWriteToTEDSFromFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 DAQmxGetPhysicalChanAttribute ( const char physicalChannel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxWaitForNextSampleClock ( TaskHandle taskHandle , float64 timeout , bool32 * isLate ); 
fcns.name{fcnNum}='DAQmxWaitForNextSampleClock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 DAQmxGetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetRealTimeAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetRealTimeAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.name{fcnNum}='DAQmxResetRealTimeAttribute'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% bool32 _stdcall DAQmxIsReadOrWriteLate ( int32 errorCode ); 
fcns.name{fcnNum}='DAQmxIsReadOrWriteLate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSaveTask ( TaskHandle taskHandle , const char saveAs [], const char author [], uInt32 options ); 
fcns.name{fcnNum}='DAQmxSaveTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSaveGlobalChan ( TaskHandle taskHandle , const char channelName [], const char saveAs [], const char author [], uInt32 options ); 
fcns.name{fcnNum}='DAQmxSaveGlobalChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSaveScale ( const char scaleName [], const char saveAs [], const char author [], uInt32 options ); 
fcns.name{fcnNum}='DAQmxSaveScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDeleteSavedTask ( const char taskName []); 
fcns.name{fcnNum}='DAQmxDeleteSavedTask'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDeleteSavedGlobalChan ( const char channelName []); 
fcns.name{fcnNum}='DAQmxDeleteSavedGlobalChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDeleteSavedScale ( const char scaleName []); 
fcns.name{fcnNum}='DAQmxDeleteSavedScale'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 DAQmxGetPersistedTaskAttribute ( const char taskName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedTaskAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetPersistedChanAttribute ( const char channel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetPersistedScaleAttribute ( const char scaleName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetSystemInfoAttribute ( int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetSystemInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetDigitalPowerUpStates ( const char deviceName [], const char channelNames [], int32 state , ...); 
fcns.name{fcnNum}='DAQmxSetDigitalPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetDigitalPowerUpStates ( const char deviceName [], const char channelName [], int32 * state , ...); 
fcns.name{fcnNum}='DAQmxGetDigitalPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'longPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetDigitalPullUpPullDownStates ( const char deviceName [], const char channelName [], int32 state , ...); 
fcns.name{fcnNum}='DAQmxSetDigitalPullUpPullDownStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetDigitalPullUpPullDownStates ( const char deviceName [], const char channelName [], int32 * state , ...); 
fcns.name{fcnNum}='DAQmxGetDigitalPullUpPullDownStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'longPtr', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxSetAnalogPowerUpStates ( const char deviceName [], const char channelNames [], float64 state , int32 channelType , ...); 
fcns.name{fcnNum}='DAQmxSetAnalogPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'double', 'long', 'error'};fcnNum=fcnNum+1;
% int32 DAQmxGetAnalogPowerUpStates ( const char deviceName [], const char channelName [], float64 * state , int32 channelType , ...); 
fcns.name{fcnNum}='DAQmxGetAnalogPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'doublePtr', 'long', 'error'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigitalLogicFamilyPowerUpState ( const char deviceName [], int32 logicFamily ); 
fcns.name{fcnNum}='DAQmxSetDigitalLogicFamilyPowerUpState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigitalLogicFamilyPowerUpState ( const char deviceName [], int32 * logicFamily ); 
fcns.name{fcnNum}='DAQmxGetDigitalLogicFamilyPowerUpState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxAddNetworkDevice ( const char IPAddress [], const char deviceName [], bool32 attemptReservation , float64 timeout , char deviceNameOut [], uInt32 deviceNameOutBufferSize ); 
fcns.name{fcnNum}='DAQmxAddNetworkDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'double', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxDeleteNetworkDevice ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxDeleteNetworkDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxReserveNetworkDevice ( const char deviceName [], bool32 overrideReservation ); 
fcns.name{fcnNum}='DAQmxReserveNetworkDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxUnreserveNetworkDevice ( const char deviceName []); 
fcns.name{fcnNum}='DAQmxUnreserveNetworkDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetErrorString ( int32 errorCode , char errorString [], uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetErrorString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExtendedErrorInfo ( char errorString [], uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExtendedErrorInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetBufInputBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetBufInputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetBufInputBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetBufInputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetBufInputBufSize ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetBufInputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetBufInputOnbrdBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetBufInputOnbrdBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetBufOutputBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetBufOutputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetBufOutputBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetBufOutputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetBufOutputBufSize ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetBufOutputBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetBufOutputOnbrdBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetBufOutputOnbrdBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetBufOutputOnbrdBufSize ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSelfCalSupported ( const char deviceName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSelfCalSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSelfCalLastTemp ( const char deviceName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSelfCalLastTemp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExtCalRecommendedInterval ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetExtCalRecommendedInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExtCalLastTemp ( const char deviceName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExtCalLastTemp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCalUserDefinedInfo ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCalUserDefinedInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCalUserDefinedInfo ( const char deviceName [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCalUserDefinedInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCalUserDefinedInfoMaxSize ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCalUserDefinedInfoMaxSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCalDevTemp ( const char deviceName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCalDevTemp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCalAccConnectionCount ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCalAccConnectionCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCalAccConnectionCount ( const char deviceName [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCalAccConnectionCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCalRecommendedAccConnectionCountLimit ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCalRecommendedAccConnectionCountLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIMax ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIMin ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIMeasType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIMeasType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIVoltageUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIVoltagedBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIVoltagedBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIVoltagedBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIVoltagedBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIVoltagedBRef ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIVoltagedBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAITempUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAITempUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAITempUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAITempUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAITempUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAITempUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmcplType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmcplType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmcplType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmcplType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmcplScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmcplScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplCJCSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplCJCChan ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRTDType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRTDType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRTDType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIRTDType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRTDType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRTDType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRTDR0 ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRTDR0'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRTDR0 ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRTDR0'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRTDR0 ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRTDR0'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRTDA ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRTDA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRTDA ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRTDA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRTDA ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRTDA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRTDB ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRTDB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRTDB ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRTDB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRTDB ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRTDB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRTDC ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRTDC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRTDC ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRTDC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRTDC ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRTDC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmstrA ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmstrA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmstrA ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmstrA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmstrA ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmstrA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmstrB ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmstrB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmstrB ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmstrB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmstrB ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmstrB'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmstrC ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmstrC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmstrC ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmstrC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmstrC ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmstrC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmstrR1 ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmstrR1'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmstrR1 ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmstrR1'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmstrR1 ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmstrR1'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIForceReadFromChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIForceReadFromChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIForceReadFromChan ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIForceReadFromChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICurrentUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAICurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICurrentUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAICurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICurrentUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIStrainUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIStrainUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIStrainUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIStrainUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIStrainUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIStrainUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIStrainGageCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIStrainGageCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIStrainGageCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIStrainGageCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIStrainGageCfg ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIStrainGageCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIResistanceUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIResistanceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIResistanceUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIResistanceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIResistanceUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIResistanceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIFreqHyst ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIFreqHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIFreqHyst ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIFreqHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIFreqHyst ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIFreqHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILVDTUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILVDTUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAILVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILVDTUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAILVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAILVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILVDTSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRVDTUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRVDTUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIRVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRVDTUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRVDTUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRVDTSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAISoundPressureUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAISoundPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAISoundPressureUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAISoundPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAISoundPressureUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAISoundPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAISoundPressuredBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAISoundPressuredBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAISoundPressuredBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAccelUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAccelUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAccelUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIAccelUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAccelUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAccelUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAcceldBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAcceldBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAcceldBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIAcceldBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAcceldBRef ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAcceldBRef'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAccelSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAccelSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAccelSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIAccelSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAccelSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAccelSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIForceUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIForceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIForceUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIForceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIForceUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIForceUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIPressureUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIPressureUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIPressureUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIPressureUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAITorqueUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAITorqueUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAITorqueUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAITorqueUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAITorqueUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAITorqueUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIIsTEDS ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIIsTEDS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAITEDSUnits ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAITEDSUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICoupling ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAICoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICoupling ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAICoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICoupling ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAITermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAITermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAITermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAITermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIInputSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIInputSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIInputSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIInputSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIInputSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIInputSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIResistanceCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIResistanceCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIResistanceCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIResistanceCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIResistanceCfg ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIResistanceCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILeadWireResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAILeadWireResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILeadWireResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAILeadWireResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILeadWireResistance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILeadWireResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeCfg ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeNomResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeNomResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeNomResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAICurrentShuntLoc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAICurrentShuntLoc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICurrentShuntLoc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAICurrentShuntResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAICurrentShuntResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAICurrentShuntResistance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitUseForScaling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitUseForScaling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitUseForScaling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitActualVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitActualVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitActualVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitActualVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitDCorAC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitDCorAC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitDCorAC ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitDCorAC'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIACExcitFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIACExcitFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIACExcitFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIACExcitFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIACExcitFreq ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIACExcitFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIACExcitWireMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIACExcitWireMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIACExcitWireMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIACExcitWireMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIACExcitWireMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIACExcitWireMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAtten ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAtten ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAtten ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIProbeAtten ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIProbeAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIProbeAtten ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIProbeAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIProbeAtten ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIProbeAtten'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIFilterDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIFilterDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAveragingWinSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAveragingWinSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAveragingWinSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIAveragingWinSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAveragingWinSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAveragingWinSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIResolutionUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIResolution ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIResolution'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRawSampSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRawSampSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRawSampJustification ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRawSampJustification'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIADCTimingMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIADCTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIADCTimingMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIADCTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIADCTimingMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIADCTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDitherEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIDitherEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIDitherEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIDitherEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIDitherEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIDitherEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalHasValidCalInfo ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalHasValidCalInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalEnableCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalEnableCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalEnableCal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalOperatorName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalOperatorName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalOperatorName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalDesc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalDesc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalDesc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalDesc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalDesc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalDesc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRngHigh ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRngHigh ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRngHigh ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRngLow ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRngLow ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRngLow ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDCOffset ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIDCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIDCOffset ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIDCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIDCOffset ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIDCOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIGain ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIGain ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIGain ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAISampAndHoldEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAISampAndHoldEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAISampAndHoldEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIAutoZeroMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIAutoZeroMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIAutoZeroMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIAutoZeroMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIAutoZeroMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIAutoZeroMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIRawDataCompressionType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIRawDataCompressionType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIRawDataCompressionType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIDevScalingCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAIDevScalingCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOMax ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOMin ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOCustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAOCustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOCustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAOCustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOCustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOCustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOOutputType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOOutputType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOVoltageUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOVoltageUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOCurrentUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOCurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOCurrentUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOCurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOCurrentUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOCurrentUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenFreq ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenOffset ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenOffset ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenOffset ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenModulationType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenModulationType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenModulationType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOOutputImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOOutputImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOOutputImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOOutputImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOOutputImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOOutputImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOLoadImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOLoadImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOLoadImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOLoadImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOLoadImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOLoadImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOTermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOTermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOTermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOTermCfg'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOResolutionUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAOResolutionUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOResolutionUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOResolutionUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOResolution ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOResolution'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRngHigh ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRngHigh ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRngHigh ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRngHigh'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRngLow ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRngLow ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRngLow ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRngLow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRefConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRefConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRefConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRefSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRefSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRefSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRefSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRefSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRefSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRefExtSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAODACRefExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRefExtSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAODACRefExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRefExtSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRefExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACRefVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACRefVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACRefVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAODACRefVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACRefVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACRefVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACOffsetSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACOffsetSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACOffsetSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAODACOffsetSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACOffsetSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACOffsetSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODACOffsetVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAODACOffsetVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODACOffsetVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAODACOffsetVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODACOffsetVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODACOffsetVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOReglitchEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOReglitchEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOReglitchEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAOReglitchEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOReglitchEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOReglitchEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOGain ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAOGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOGain ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAOGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOGain ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOGain'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAODevScalingCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetAODevScalingCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIInvertLines ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIInvertLines ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDIInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIInvertLines ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDINumLines ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDINumLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDIDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDIDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDITristate ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDITristate ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDITristate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDILogicFamily ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDILogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDILogicFamily ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDILogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDILogicFamily ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDILogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetDIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDIAcquireOn ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDIAcquireOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDIAcquireOn ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDIAcquireOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDIAcquireOn ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDIAcquireOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOOutputDriveType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOOutputDriveType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOOutputDriveType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOOutputDriveType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOOutputDriveType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOOutputDriveType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOInvertLines ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOInvertLines ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDOInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOInvertLines ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOInvertLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDONumLines ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDONumLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOTristate ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOTristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOTristate ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDOTristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOTristate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOTristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOLineStatesStartState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOLineStatesStartState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOLineStatesStartState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOLineStatesStartState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOLineStatesStartState ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOLineStatesStartState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOLineStatesPausedState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOLineStatesPausedState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOLineStatesPausedState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOLineStatesDoneState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOLineStatesDoneState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOLineStatesDoneState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOLogicFamily ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOLogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOLogicFamily ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOLogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOLogicFamily ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOLogicFamily'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDOOvercurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetDOOvercurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOOvercurrentLimit'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetDOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDOGenerateOn ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDOGenerateOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDOGenerateOn ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDOGenerateOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDOGenerateOn ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetDOGenerateOn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIMax ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIMin ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICustomScaleName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIMeasType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIMeasType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqMeasTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqMeasTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqMeasTime ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodMeasTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDir ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDir'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDir ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDir'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDir ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDir'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIAngEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIAngEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIAngEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCILinEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCILinEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCILinEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCILinEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCILinEncoderUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCILinEncoderUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderDecodingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderDecodingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderDecodingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITimestampUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITimestampUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITimestampUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCITimestampUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITimestampUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITimestampUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIGPSSyncMethod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIGPSSyncMethod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIGPSSyncMethod'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCIGPSSyncSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCIGPSSyncSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIGPSSyncSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIOutputState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIOutputState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCITCReached ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCITCReached'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIDataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIDataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCINumPossiblyInvalidSamps ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCINumPossiblyInvalidSamps'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIDupCountPrevent ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIDupCountPrevent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIDupCountPrevent ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCIDupCountPrevent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIDupCountPrevent ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIDupCountPrevent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCIPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCIPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCIPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCIPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCIPrescaler ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCIPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOOutputType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOOutputType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseIdleState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseIdleState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseIdleState ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCOPulseTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseTerm ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseTimeUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseHighTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseHighTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseHighTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseHighTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseHighTime ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseHighTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseLowTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseLowTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseLowTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseLowTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseLowTime ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseLowTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseDutyCyc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseDutyCyc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseDutyCyc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseFreqUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseFreq ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseHighTicks ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseHighTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseHighTicks ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseHighTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseHighTicks ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseHighTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseLowTicks ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseLowTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseLowTicks ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseLowTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseLowTicks ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseLowTicks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOOutputState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOOutputState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOAutoIncrCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOAutoIncrCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOAutoIncrCnt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPulseDone ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPulseDone'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOConstrainedGenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCOConstrainedGenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOConstrainedGenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCODataXferMech'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetCODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetCODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCODataXferReqCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOUsbXferReqSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetCOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOMemMapEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCOPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCOPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetCOPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetCOPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetCOPrescaler ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetCOPrescaler'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCORdyForNewVal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetCORdyForNewVal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChanType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetChanType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetPhysicalChanName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetPhysicalChanName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChanDescr ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetChanDescr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetChanDescr ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetChanDescr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetChanDescr ( TaskHandle taskHandle , const char channel []); 
fcns.name{fcnNum}='DAQmxResetChanDescr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChanIsGlobal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetChanIsGlobal'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAIConvClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAIConvClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAIConvClkOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAIConvClkPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAIConvClkPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSampClkOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSampClkOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSampClkOutputBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSampClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSampClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSampClkOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSampClkDelayOffset ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSampClkDelayOffset ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSampClkDelayOffset ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSampClkPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSampClkPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSampClkPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvTrigPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvTrigPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvTrigPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedPauseTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedPauseTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedPauseTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRefTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRefTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRefTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRefTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRefTrigPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRefTrigPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedStartTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedStartTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedStartTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedStartTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedStartTrigPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedStartTrigPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvCmpltEventDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvCmpltEventDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvCmpltEventDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventOutputBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedHshkEventPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedHshkEventPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedHshkEventPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevIsSimulated ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevIsSimulated'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevProductCategory ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevProductCategory'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevProductType ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevProductType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevProductNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevProductNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevSerialNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevSerialNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAccessoryProductTypes ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevAccessoryProductTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAccessoryProductNums ( const char device [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAccessoryProductNums'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAccessorySerialNums ( const char device [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAccessorySerialNums'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetCarrierSerialNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetCarrierSerialNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevChassisModuleDevNames ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevChassisModuleDevNames'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAnlgTrigSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAnlgTrigSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDigTrigSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevDigTrigSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevAIPhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAISupportedMeasTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAISupportedMeasTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIMaxSingleChanRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAIMaxSingleChanRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIMaxMultiChanRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAIMaxMultiChanRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIMinRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAIMinRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAISimultaneousSamplingSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAISimultaneousSamplingSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAISampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAISampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAITrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAITrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIVoltageRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIVoltageRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIVoltageIntExcitDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIVoltageIntExcitDiscreteVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIVoltageIntExcitRangeVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIVoltageIntExcitRangeVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAICurrentRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAICurrentRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAICurrentIntExcitDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAICurrentIntExcitDiscreteVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIBridgeRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIBridgeRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIResistanceRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIResistanceRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIFreqRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIFreqRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAIGains ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAIGains'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAICouplings ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAICouplings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAILowpassCutoffFreqDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAILowpassCutoffFreqDiscreteVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAILowpassCutoffFreqRangeVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAILowpassCutoffFreqRangeVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevAOPhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOSupportedOutputTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAOSupportedOutputTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOSampClkSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAOSampClkSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOSampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAOSampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOMaxRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAOMaxRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOMinRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAOMinRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOTrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevAOTrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOVoltageRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAOVoltageRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOCurrentRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAOCurrentRngs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevAOGains ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevAOGains'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDILines ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevDILines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDIPorts ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevDIPorts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDIMaxRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevDIMaxRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDITrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevDITrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDOLines ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevDOLines'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDOPorts ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevDOPorts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDOMaxRate ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevDOMaxRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevDOTrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevDOTrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevCIPhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCISupportedMeasTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevCISupportedMeasTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCITrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCITrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCISampClkSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCISampClkSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCISampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevCISampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCIMaxSize ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCIMaxSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCIMaxTimebase ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCIMaxTimebase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevCOPhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOSupportedOutputTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevCOSupportedOutputTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOSampClkSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCOSampClkSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOSampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetDevCOSampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOTrigUsage ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCOTrigUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOMaxSize ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCOMaxSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCOMaxTimebase ( const char device [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCOMaxTimebase'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevTEDSHWTEDSSupported ( const char device [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevTEDSHWTEDSSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevNumDMAChans ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevNumDMAChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevBusType ( const char device [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevBusType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevPCIBusNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevPCIBusNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevPCIDevNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevPCIDevNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevPXIChassisNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevPXIChassisNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevPXISlotNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevPXISlotNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCompactDAQChassisDevName ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevCompactDAQChassisDevName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevCompactDAQSlotNum ( const char device [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetDevCompactDAQSlotNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevTCPIPHostname ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevTCPIPHostname'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevTCPIPEthernetIP ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevTCPIPEthernetIP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevTCPIPWirelessIP ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevTCPIPWirelessIP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDevTerminals ( const char device [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDevTerminals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadRelativeTo ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadRelativeTo ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetReadRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadRelativeTo ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOffset ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadOffset ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetReadOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadOffset ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadChannelsToRead ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadChannelsToRead'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadChannelsToRead ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetReadChannelsToRead'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadChannelsToRead ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadChannelsToRead'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadReadAllAvailSamp ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadReadAllAvailSamp ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadReadAllAvailSamp ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadAutoStart ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadAutoStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadAutoStart ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetReadAutoStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadAutoStart ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadAutoStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOverWrite ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOverWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadOverWrite ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetReadOverWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadOverWrite ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadOverWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadCurrReadPos ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetReadCurrReadPos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadAvailSampPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadAvailSampPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingFilePath ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetLoggingFilePath'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingFilePath ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetLoggingFilePath'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingFilePath ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingFilePath'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingTDMSGroupName ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingTDMSGroupName ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingTDMSGroupName ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingTDMSOperation ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingTDMSOperation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingTDMSOperation ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingTDMSOperation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingTDMSOperation ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingTDMSOperation'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingPause ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingPause'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingPause ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingPause'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingPause ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingPause'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingSampsPerFile ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingSampsPerFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingSampsPerFile ( TaskHandle taskHandle , uInt64 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingSampsPerFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingSampsPerFile ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingSampsPerFile'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingFileWriteSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingFileWriteSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingFileWriteSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingFileWriteSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingFileWriteSize ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingFileWriteSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetLoggingFilePreallocationSize ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetLoggingFilePreallocationSize ( TaskHandle taskHandle , uInt64 data ); 
fcns.name{fcnNum}='DAQmxSetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetLoggingFilePreallocationSize ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadTotalSampPerChanAcquired ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetReadTotalSampPerChanAcquired'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadCommonModeRangeErrorChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadCommonModeRangeErrorChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadCommonModeRangeErrorChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadCommonModeRangeErrorChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOvercurrentChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOvercurrentChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOvercurrentChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadOvercurrentChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOpenCurrentLoopChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOpenCurrentLoopChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOpenCurrentLoopChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadOpenCurrentLoopChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOpenThrmcplChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOpenThrmcplChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOpenThrmcplChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadOpenThrmcplChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOverloadedChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadOverloadedChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadOverloadedChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadOverloadedChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadAccessoryInsertionOrRemovalDetected ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadAccessoryInsertionOrRemovalDetected'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadDevsWithInsertedOrRemovedAccessories ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetReadDevsWithInsertedOrRemovedAccessories'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadChangeDetectHasOverflowed ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadChangeDetectHasOverflowed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadRawDataWidth ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadRawDataWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadNumChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadDigitalLinesBytesPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadDigitalLinesBytesPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetReadWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetReadWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadWaitMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetReadSleepTime ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetReadSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetReadSleepTime ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetReadSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetReadSleepTime ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetReadSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRealTimeNumOfWarmupIters ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRealTimeNumOfWarmupIters ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeNumOfWarmupIters ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRealTimeReportMissedSamp ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRealTimeReportMissedSamp ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeReportMissedSamp ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRealTimeWriteRecoveryMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRealTimeWriteRecoveryMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRealTimeWriteRecoveryMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanUsage ( const char switchChannelName [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchChanUsage ( const char switchChannelName [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchChanUsage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanAnlgBusSharingEnable ( const char switchChannelName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanAnlgBusSharingEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchChanAnlgBusSharingEnable ( const char switchChannelName [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchChanAnlgBusSharingEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxACCarryCurrent ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACCarryCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxACSwitchCurrent ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACSwitchCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxACCarryPwr ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACCarryPwr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxACSwitchPwr ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACSwitchPwr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxDCCarryCurrent ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCCarryCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxDCSwitchCurrent ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCSwitchCurrent'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxDCCarryPwr ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCCarryPwr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxDCSwitchPwr ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCSwitchPwr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxACVoltage ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanMaxDCVoltage ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCVoltage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanWireMode ( const char switchChannelName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanWireMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanBandwidth ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanBandwidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchChanImpedance ( const char switchChannelName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchChanImpedance'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevSettlingTime ( const char deviceName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevSettlingTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchDevSettlingTime ( const char deviceName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchDevSettlingTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevAutoConnAnlgBus ( const char deviceName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevAutoConnAnlgBus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchDevAutoConnAnlgBus ( const char deviceName [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchDevAutoConnAnlgBus'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling ( const char deviceName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling ( const char deviceName [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevSettled ( const char deviceName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevSettled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevRelayList ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevRelayList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevNumRelays ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevNumRelays'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevSwitchChanList ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevSwitchChanList'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevNumSwitchChans ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevNumSwitchChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevNumRows ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevNumRows'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevNumColumns ( const char deviceName [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevNumColumns'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchDevTopology ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSwitchDevTopology'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchScanBreakMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchScanBreakMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchScanBreakMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchScanBreakMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSwitchScanBreakMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSwitchScanBreakMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchScanRepeatMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSwitchScanRepeatMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSwitchScanRepeatMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSwitchScanWaitingForAdv ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSwitchScanWaitingForAdv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleDescr ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetScaleDescr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleDescr ( const char scaleName [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetScaleDescr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleScaledUnits ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetScaleScaledUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleScaledUnits ( const char scaleName [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetScaleScaledUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScalePreScaledUnits ( const char scaleName [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetScalePreScaledUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScalePreScaledUnits ( const char scaleName [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetScalePreScaledUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleType ( const char scaleName [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleLinSlope ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleLinSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleLinSlope ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleLinSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleLinYIntercept ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleLinYIntercept'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleLinYIntercept ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleLinYIntercept'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleMapScaledMax ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleMapScaledMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleMapScaledMax ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleMapScaledMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleMapPreScaledMax ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleMapPreScaledMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleMapPreScaledMax ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleMapPreScaledMax'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleMapScaledMin ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleMapScaledMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleMapScaledMin ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleMapScaledMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleMapPreScaledMin ( const char scaleName [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetScaleMapPreScaledMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleMapPreScaledMin ( const char scaleName [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetScaleMapPreScaledMin'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScalePolyForwardCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetScalePolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScalePolyForwardCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetScalePolyForwardCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScalePolyReverseCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetScalePolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScalePolyReverseCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetScalePolyReverseCoeff'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleTableScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetScaleTableScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleTableScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetScaleTableScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetScaleTablePreScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetScaleTablePreScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetScaleTablePreScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxSetScaleTablePreScaledVals'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysGlobalChans ( char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSysGlobalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysScales ( char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSysScales'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysTasks ( char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSysTasks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysDevNames ( char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSysDevNames'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysNIDAQMajorVersion ( uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSysNIDAQMajorVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysNIDAQMinorVersion ( uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSysNIDAQMinorVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSysNIDAQUpdateVersion ( uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSysNIDAQUpdateVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskName ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetTaskName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskChannels ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetTaskChannels'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetTaskNumChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskDevices ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetTaskDevices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskNumDevices ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetTaskNumDevices'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTaskComplete ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetTaskComplete'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampQuantSampMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampQuantSampMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampQuantSampMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampQuantSampMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampQuantSampMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampQuantSampMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampQuantSampPerChan ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampQuantSampPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampQuantSampPerChan ( TaskHandle taskHandle , uInt64 data ); 
fcns.name{fcnNum}='DAQmxSetSampQuantSampPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampQuantSampPerChan ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampQuantSampPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampTimingType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampTimingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampTimingType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampTimingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampTimingType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampTimingType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkMaxRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkMaxRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSampClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetSampClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkActiveEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkOverrunBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkOverrunBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkOverrunBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkUnderflowBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkUnderflowBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkUnderflowBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimebaseDiv ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSampClkTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimebaseActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimebaseActiveEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimebaseTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimebaseTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetHshkDelayAfterXfer ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetHshkDelayAfterXfer ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetHshkDelayAfterXfer ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetHshkStartCond ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetHshkStartCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetHshkStartCond ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetHshkStartCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetHshkStartCond ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetHshkStartCond'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetHshkSampleInputDataWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetHshkSampleInputDataWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetHshkSampleInputDataWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetChangeDetectDITristate ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetChangeDetectDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetChangeDetectDITristate ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetChangeDetectDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetChangeDetectDITristate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetChangeDetectDITristate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetImplicitUnderflowBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetImplicitUnderflowBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetImplicitUnderflowBehavior ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvMaxRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvMaxRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvMaxRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvMaxRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIConvSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIConvSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIConvSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIConvSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvActiveEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvActiveEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvTimebaseDiv ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames [], uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvTimebaseSrc ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvTimebaseSrc ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDelayFromSampClkDelayUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDelayFromSampClkDelayUnits ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDelayFromSampClkDelayUnits ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDelayFromSampClkDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDelayFromSampClkDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDelayFromSampClkDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], const char * data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.name{fcnNum}='DAQmxResetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetMasterTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetMasterTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetMasterTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetMasterTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetMasterTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetMasterTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetMasterTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetMasterTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetMasterTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetMasterTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetMasterTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetMasterTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefClkRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetRefClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefClkRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetRefClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefClkRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefClkRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefClkSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetRefClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefClkSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetRefClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefClkSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefClkSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSyncPulseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetSyncPulseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSyncPulseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSyncPulseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseSyncTime ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseSyncTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseMinDelayToStart ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSyncPulseMinDelayToStart ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSyncPulseMinDelayToStart ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseResetTime ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseResetTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseResetDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseResetDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSyncPulseResetDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetSyncPulseResetDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSyncPulseResetDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSyncPulseResetDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncPulseTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetSyncPulseTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSyncClkInterval ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSyncClkInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSyncClkInterval ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetSyncClkInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSyncClkInterval ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSyncClkInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampTimingEngine ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampTimingEngine'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampTimingEngine ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetSampTimingEngine'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampTimingEngine ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampTimingEngine'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetStartTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetStartTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetStartTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetStartTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetStartTrigTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternStartTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternStartTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternStartTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternStartTrigPattern ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternStartTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternStartTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternStartTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigTop ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigBtm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetStartTrigDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetStartTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetStartTrigDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetStartTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetStartTrigDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetStartTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetStartTrigDelayUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetStartTrigDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetStartTrigDelayUnits ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetStartTrigDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetStartTrigDelayUnits ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetStartTrigDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetStartTrigRetriggerable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetStartTrigRetriggerable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetStartTrigRetriggerable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetStartTrigRetriggerable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetStartTrigRetriggerable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetStartTrigRetriggerable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetRefTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetRefTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigPretrigSamples ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefTrigPretrigSamples ( TaskHandle taskHandle , uInt32 data ); 
fcns.name{fcnNum}='DAQmxSetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefTrigPretrigSamples ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetRefTrigTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternRefTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternRefTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternRefTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternRefTrigPattern ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternRefTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternRefTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternRefTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigTop ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigBtm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigAutoTrigEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefTrigAutoTrigEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefTrigAutoTrigEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigAutoTriggered ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetRefTrigAutoTriggered'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetRefTrigDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetRefTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetRefTrigDelay ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetRefTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetRefTrigDelay ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetRefTrigDelay'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAdvTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAdvTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAdvTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAdvTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAdvTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAdvTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeAdvTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeAdvTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeAdvTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeAdvTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeAdvTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeAdvTrigEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetHshkTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetHshkTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetHshkTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetHshkTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetHshkTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetHshkTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetInterlockedHshkTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetInterlockedHshkTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetInterlockedHshkTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPauseTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetPauseTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetPauseTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetPauseTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetPauseTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetPauseTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPauseTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPauseTrigTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigTop ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigBtm ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternPauseTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternPauseTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternPauseTrigPattern ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigPatternPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigPatternPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigPatternPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetArmStartTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetArmStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetArmStartTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetArmStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetArmStartTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetArmStartTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetArmStartTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetArmStartTerm'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetTriggerSyncType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetTriggerSyncType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetTriggerSyncType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetTriggerSyncType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetTriggerSyncType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetTriggerSyncType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWatchdogTimeout ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetWatchdogTimeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWatchdogTimeout ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetWatchdogTimeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWatchdogTimeout ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWatchdogTimeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWatchdogExpirTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWatchdogExpirTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWatchdogExpirTrigType ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWatchdogDOExpirState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines [], int32 data ); 
fcns.name{fcnNum}='DAQmxSetWatchdogDOExpirState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines []); 
fcns.name{fcnNum}='DAQmxResetWatchdogDOExpirState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWatchdogHasExpired ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWatchdogHasExpired'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteRelativeTo ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteRelativeTo ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetWriteRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteRelativeTo ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteRelativeTo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOffset ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteOffset ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetWriteOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteOffset ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteOffset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteRegenMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteRegenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteRegenMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetWriteRegenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteRegenMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteRegenMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteCurrWritePos ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteCurrWritePos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOvercurrentChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteOvercurrentChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOvercurrentChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetWriteOvercurrentChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOvertemperatureChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteOvertemperatureChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOpenCurrentLoopChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteOpenCurrentLoopChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteOpenCurrentLoopChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetWriteOpenCurrentLoopChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWritePowerSupplyFaultChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWritePowerSupplyFaultChansExist'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWritePowerSupplyFaultChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetWritePowerSupplyFaultChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteSpaceAvail ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteSpaceAvail'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteTotalSampPerChanGenerated ( TaskHandle taskHandle , uInt64 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteTotalSampPerChanGenerated'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteRawDataWidth ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteRawDataWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteNumChans'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetWriteWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteWaitMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteWaitMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteSleepTime ( TaskHandle taskHandle , float64 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteSleepTime ( TaskHandle taskHandle , float64 data ); 
fcns.name{fcnNum}='DAQmxSetWriteSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteSleepTime ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteSleepTime'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteNextWriteIsLast ( TaskHandle taskHandle , bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetWriteNextWriteIsLast ( TaskHandle taskHandle , bool32 data ); 
fcns.name{fcnNum}='DAQmxSetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetWriteNextWriteIsLast ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetWriteDigitalLinesBytesPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetWriteDigitalLinesBytesPerChan'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAISupportedMeasTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAISupportedMeasTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAITermCfgs ( const char physicalChannel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAITermCfgs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAIInputSrcs ( const char physicalChannel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAIInputSrcs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOSupportedOutputTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOSupportedOutputTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOTermCfgs ( const char physicalChannel [], int32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOTermCfgs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOManualControlEnable ( const char physicalChannel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetPhysicalChanAOManualControlEnable ( const char physicalChannel [], bool32 data ); 
fcns.name{fcnNum}='DAQmxSetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetPhysicalChanAOManualControlEnable ( const char physicalChannel []); 
fcns.name{fcnNum}='DAQmxResetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOManualControlShortDetected ( const char physicalChannel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlShortDetected'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOManualControlAmplitude ( const char physicalChannel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlAmplitude'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanAOManualControlFreq ( const char physicalChannel [], float64 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDIPortWidth ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDIPortWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDISampClkSupported ( const char physicalChannel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDISampClkSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDISampModes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDISampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDIChangeDetectSupported ( const char physicalChannel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDIChangeDetectSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDOPortWidth ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDOPortWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDOSampClkSupported ( const char physicalChannel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDOSampClkSupported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanDOSampModes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanDOSampModes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanCISupportedMeasTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanCISupportedMeasTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanCOSupportedOutputTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanCOSupportedOutputTypes'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSMfgID ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSMfgID'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSModelNum ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSModelNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSSerialNum ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSSerialNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSVersionNum ( const char physicalChannel [], uInt32 * data ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSVersionNum'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSVersionLetter ( const char physicalChannel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSVersionLetter'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSBitStream ( const char physicalChannel [], uInt8 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSBitStream'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPhysicalChanTEDSTemplateIDs ( const char physicalChannel [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSTemplateIDs'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedTaskAuthor ( const char taskName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPersistedTaskAuthor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedTaskAllowInteractiveEditing ( const char taskName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedTaskAllowInteractiveEditing'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedTaskAllowInteractiveDeletion ( const char taskName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedTaskAllowInteractiveDeletion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedChanAuthor ( const char channel [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPersistedChanAuthor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedChanAllowInteractiveEditing ( const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedChanAllowInteractiveEditing'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedChanAllowInteractiveDeletion ( const char channel [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedChanAllowInteractiveDeletion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedScaleAuthor ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.name{fcnNum}='DAQmxGetPersistedScaleAuthor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedScaleAllowInteractiveEditing ( const char scaleName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedScaleAllowInteractiveEditing'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetPersistedScaleAllowInteractiveDeletion ( const char scaleName [], bool32 * data ); 
fcns.name{fcnNum}='DAQmxGetPersistedScaleAllowInteractiveDeletion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxGetSampClkTimingResponseMode ( TaskHandle taskHandle , int32 * data ); 
fcns.name{fcnNum}='DAQmxGetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxSetSampClkTimingResponseMode ( TaskHandle taskHandle , int32 data ); 
fcns.name{fcnNum}='DAQmxSetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 _stdcall DAQmxResetSampClkTimingResponseMode ( TaskHandle taskHandle ); 
fcns.name{fcnNum}='DAQmxResetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
methodinfo=fcns;