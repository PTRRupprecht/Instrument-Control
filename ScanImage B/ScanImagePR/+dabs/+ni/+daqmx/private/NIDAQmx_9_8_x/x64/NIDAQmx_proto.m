function [methodinfo,structs,enuminfo,ThunkLibName]=NIDAQmx_proto
%NIDAQMX_PROTO Create structures to define interfaces found in 'NIDAQmx_mod'.

%This function was generated by loadlibrary.m parser version 1.1.6.38 on Mon Sep 16 10:48:11 2013
%perl options:'NIDAQmx_mod.i -outfile=NIDAQmx_proto.m -thunkfile=nicaiu_thunk_pcwin64.c -header=NIDAQmx_mod.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'nicaiu_thunk_pcwin64');
% int32 __stdcall DAQmxLoadTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxLoadTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTask ( const char taskName [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxCreateTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAddGlobalChansToTask ( TaskHandle taskHandle , const char channelNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxAddGlobalChansToTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStartTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxStartTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStopTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxStopTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxClearTask ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxClearTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWaitUntilTaskDone ( TaskHandle taskHandle , float64 timeToWait ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxWaitUntilTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxIsTaskDone ( TaskHandle taskHandle , bool32 * isTaskDone ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxIsTaskDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxTaskControl ( TaskHandle taskHandle , int32 action ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxTaskControl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetNthTaskChannel ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64ulongcstringlongThunk';fcns.name{fcnNum}='DAQmxGetNthTaskChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetNthTaskDevice ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64ulongcstringlongThunk';fcns.name{fcnNum}='DAQmxGetNthTaskDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetTaskAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTaskAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxRegisterEveryNSamplesEvent ( TaskHandle task , int32 everyNsamplesEventType , uInt32 nSamples , uInt32 options , DAQmxEveryNSamplesEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.thunkname{fcnNum}='longuint64longulongulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxRegisterEveryNSamplesEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxRegisterDoneEvent ( TaskHandle task , uInt32 options , DAQmxDoneEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.thunkname{fcnNum}='longuint64ulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxRegisterDoneEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxRegisterSignalEvent ( TaskHandle task , int32 signalID , uInt32 options , DAQmxSignalEventCallbackPtr callbackFunction , void * callbackData ); 
fcns.thunkname{fcnNum}='longuint64longulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxRegisterSignalEvent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAICurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAICurrentChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVoltageRMSChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageRMSChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAICurrentRMSChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAICurrentRMSChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIThrmcplChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 thermocoupleType , int32 cjcSource , float64 cjcVal , const char cjcChannel []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIThrmcplChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIRTDChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 rtdType , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , float64 r0 ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglonglongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateAIRTDChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIThrmstrChanIex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , float64 a , float64 b , float64 c ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateAIThrmstrChanIex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIThrmstrChanVex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 a , float64 b , float64 c , float64 r1 ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateAIThrmstrChanVex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIFreqVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 thresholdLevel , float64 hysteresis , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongdoubledoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIFreqVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIResistanceChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIResistanceChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIStrainGageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 strainConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 gageFactor , float64 initialBridgeVoltage , float64 nominalGageResistance , float64 poissonRatio , float64 leadWireResistance , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoubledoubledoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIStrainGageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIRosetteStrainGageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 rosetteType , float64 gageOrientation , const int32 rosetteMeasTypes [], uInt32 numRosetteMeasTypes , int32 strainConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 gageFactor , float64 nominalGageResistance , float64 poissonRatio , float64 leadWireResistance ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongdoublevoidPtrulonglonglongdoubledoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateAIRosetteStrainGageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'longPtr', 'ulong', 'long', 'long', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIForceBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoublelongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIForceBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIForceBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulonglongvoidPtrulonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIForceBridgeTableChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIForceBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulongvoidPtrulonglonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIForceBridgePolynomialChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPressureBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoublelongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPressureBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPressureBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulonglongvoidPtrulonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPressureBridgeTableChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPressureBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulongvoidPtrulonglonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPressureBridgePolynomialChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAITorqueBridgeTwoPointLinChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , float64 firstElectricalVal , float64 secondElectricalVal , int32 electricalUnits , float64 firstPhysicalVal , float64 secondPhysicalVal , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubledoubledoublelongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAITorqueBridgeTwoPointLinChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'double', 'double', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAITorqueBridgeTableChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 electricalVals [], uInt32 numElectricalVals , int32 electricalUnits , const float64 physicalVals [], uInt32 numPhysicalVals , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulonglongvoidPtrulonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAITorqueBridgeTableChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'long', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAITorqueBridgePolynomialChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const float64 forwardCoeffs [], uInt32 numForwardCoeffs , const float64 reverseCoeffs [], uInt32 numReverseCoeffs , int32 electricalUnits , int32 physicalUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublevoidPtrulongvoidPtrulonglonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAITorqueBridgePolynomialChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 nominalBridgeResistance , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIBridgeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVoltageChanWithExcit ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 bridgeConfig , int32 voltageExcitSource , float64 voltageExcitVal , bool32 useExcitForScaling , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglonglongdoubleulongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVoltageChanWithExcit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAITempBuiltInSensorChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 units ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateAITempBuiltInSensorChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIAccelChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongdoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIAccelChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIVelocityIEPEChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongdoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIVelocityIEPEChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIForceIEPEChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongdoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIForceIEPEChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIMicrophoneChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , int32 units , float64 micSensitivity , float64 maxSndPressLevel , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonglongdoubledoublelongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateAIMicrophoneChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPosLVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongdoublelonglongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPosLVDTChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPosRVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongdoublelonglongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPosRVDTChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIPosEddyCurrProxProbeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , float64 sensitivity , int32 sensitivityUnits , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongdoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAIPosEddyCurrProxProbeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAIDeviceTempChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 units ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateAIDeviceTempChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAICurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 shuntResistorLoc , float64 extShuntResistorVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAICurrentChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIThrmcplChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 cjcSource , float64 cjcVal , const char cjcChannel []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmcplChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIRTDChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubleThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIRTDChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIThrmstrChanIex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubleThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmstrChanIex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIThrmstrChanVex ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 voltageExcitSource , float64 voltageExcitVal , float64 r1 ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIThrmstrChanVex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIResistanceChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 resistanceConfig , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIResistanceChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIStrainGageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 initialBridgeVoltage , float64 leadWireResistance , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoubledoubledoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIStrainGageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIForceBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIForceBridgeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIPressureBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIPressureBridgeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAITorqueBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAITorqueBridgeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIBridgeChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIBridgeChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIVoltageChanWithExcit ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIVoltageChanWithExcit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIAccelChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIAccelChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIForceIEPEChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , float64 minVal , float64 maxVal , int32 units , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoublelonglongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIForceIEPEChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'long', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIMicrophoneChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 terminalConfig , int32 units , float64 maxSndPressLevel , int32 currentExcitSource , float64 currentExcitVal , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonglongdoublelongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIMicrophoneChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'long', 'double', 'long', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIPosLVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIPosLVDTChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTEDSAIPosRVDTChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 voltageExcitSource , float64 voltageExcitVal , float64 voltageExcitFreq , int32 ACExcitWireMode , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateTEDSAIPosRVDTChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAOVoltageChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAOVoltageChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAOCurrentChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateAOCurrentChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateAOFuncGenChan ( TaskHandle taskHandle , const char physicalChannel [], const char nameToAssignToChannel [], int32 type , float64 freq , float64 amplitude , float64 offset ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongdoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateAOFuncGenChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDIChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDIChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateDOChan ( TaskHandle taskHandle , const char lines [], const char nameToAssignToLines [], int32 lineGrouping ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCreateDOChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIFreqChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 edge , int32 measMethod , float64 measTime , uInt32 divisor , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubleulongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCIFreqChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIPeriodChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 edge , int32 measMethod , float64 measTime , uInt32 divisor , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongdoubleulongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCIPeriodChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'double', 'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCICountEdgesChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 edge , uInt32 initialCount , int32 countDirection ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongulonglongThunk';fcns.name{fcnNum}='DAQmxCreateCICountEdgesChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'ulong', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIPulseWidthChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 startingEdge , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCIPulseWidthChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCISemiPeriodChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCISemiPeriodChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCITwoEdgeSepChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units , int32 firstEdge , int32 secondEdge , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelonglonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCITwoEdgeSepChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIPulseChanFreq ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongThunk';fcns.name{fcnNum}='DAQmxCreateCIPulseChanFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIPulseChanTime ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], float64 minVal , float64 maxVal , int32 units ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringdoubledoublelongThunk';fcns.name{fcnNum}='DAQmxCreateCIPulseChanTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIPulseChanTicks ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], const char sourceTerminal [], float64 minVal , float64 maxVal ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateCIPulseChanTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCILinEncoderChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 decodingType , bool32 ZidxEnable , float64 ZidxVal , int32 ZidxPhase , int32 units , float64 distPerPulse , float64 initialPos , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongulongdoublelonglongdoubledoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateCILinEncoderChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'ulong', 'double', 'long', 'long', 'double', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIAngEncoderChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 decodingType , bool32 ZidxEnable , float64 ZidxVal , int32 ZidxPhase , int32 units , uInt32 pulsesPerRev , float64 initialAngle , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongulongdoublelonglongulongdoublecstringThunk';fcns.name{fcnNum}='DAQmxCreateCIAngEncoderChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'ulong', 'double', 'long', 'long', 'ulong', 'double', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCIGPSTimestampChan ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 syncMethod , const char customScaleName []); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateCIGPSTimestampChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCOPulseChanFreq ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 idleState , float64 initialDelay , float64 freq , float64 dutyCycle ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonglongdoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateCOPulseChanFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCOPulseChanTime ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], int32 units , int32 idleState , float64 initialDelay , float64 lowTime , float64 highTime ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonglongdoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxCreateCOPulseChanTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'long', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateCOPulseChanTicks ( TaskHandle taskHandle , const char counter [], const char nameToAssignToChannel [], const char sourceTerminal [], int32 idleState , int32 initialDelay , int32 lowTicks , int32 highTicks ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringcstringlonglonglonglongThunk';fcns.name{fcnNum}='DAQmxCreateCOPulseChanTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'cstring', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalCalDate ( TaskHandle taskHandle , const char channelName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalCalDate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalCalDate ( TaskHandle taskHandle , const char channelName [], uInt32 year , uInt32 month , uInt32 day , uInt32 hour , uInt32 minute ); 
fcns.thunkname{fcnNum}='longuint64cstringulongulongulongulongulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalCalDate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalExpDate ( TaskHandle taskHandle , const char channelName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalExpDate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalExpDate ( TaskHandle taskHandle , const char channelName [], uInt32 year , uInt32 month , uInt32 day , uInt32 hour , uInt32 minute ); 
fcns.thunkname{fcnNum}='longuint64cstringulongulongulongulongulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalExpDate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong', 'ulong', 'ulong', 'ulong', 'ulong'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetChanAttribute ( TaskHandle taskHandle , const char channel [], int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxResetChanAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64cstringdoublelonglonguint64Thunk';fcns.name{fcnNum}='DAQmxCfgSampClkTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgHandshakingTiming ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64longuint64Thunk';fcns.name{fcnNum}='DAQmxCfgHandshakingTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgBurstHandshakingTimingImportClock ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan , float64 sampleClkRate , const char sampleClkSrc [], int32 sampleClkActiveEdge , int32 pauseWhen , int32 readyEventActiveLevel ); 
fcns.thunkname{fcnNum}='longuint64longuint64doublecstringlonglonglongThunk';fcns.name{fcnNum}='DAQmxCfgBurstHandshakingTimingImportClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'uint64', 'double', 'cstring', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgBurstHandshakingTimingExportClock ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan , float64 sampleClkRate , const char sampleClkOutpTerm [], int32 sampleClkPulsePolarity , int32 pauseWhen , int32 readyEventActiveLevel ); 
fcns.thunkname{fcnNum}='longuint64longuint64doublecstringlonglonglongThunk';fcns.name{fcnNum}='DAQmxCfgBurstHandshakingTimingExportClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'uint64', 'double', 'cstring', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgChangeDetectionTiming ( TaskHandle taskHandle , const char risingEdgeChan [], const char fallingEdgeChan [], int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlonguint64Thunk';fcns.name{fcnNum}='DAQmxCfgChangeDetectionTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgImplicitTiming ( TaskHandle taskHandle , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64longuint64Thunk';fcns.name{fcnNum}='DAQmxCfgImplicitTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgPipelinedSampClkTiming ( TaskHandle taskHandle , const char source [], float64 rate , int32 activeEdge , int32 sampleMode , uInt64 sampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64cstringdoublelonglonguint64Thunk';fcns.name{fcnNum}='DAQmxCfgPipelinedSampClkTiming'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double', 'long', 'long', 'uint64'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetTimingAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTimingAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetTimingAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTimingAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetTimingAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetTimingAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTimingAttributeEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTimingAttributeEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetTimingAttributeEx ( TaskHandle taskHandle , const char deviceNames [], int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxResetTimingAttributeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDisableStartTrig ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxDisableStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxCfgDigEdgeStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgAnlgEdgeStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerSlope , float64 triggerLevel ); 
fcns.thunkname{fcnNum}='longuint64cstringlongdoubleThunk';fcns.name{fcnNum}='DAQmxCfgAnlgEdgeStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgAnlgWindowStartTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerWhen , float64 windowTop , float64 windowBottom ); 
fcns.thunkname{fcnNum}='longuint64cstringlongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxCfgAnlgWindowStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigPatternStartTrig ( TaskHandle taskHandle , const char triggerSource [], const char triggerPattern [], int32 triggerWhen ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongThunk';fcns.name{fcnNum}='DAQmxCfgDigPatternStartTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDisableRefTrig ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxDisableRefTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigEdgeRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge , uInt32 pretriggerSamples ); 
fcns.thunkname{fcnNum}='longuint64cstringlongulongThunk';fcns.name{fcnNum}='DAQmxCfgDigEdgeRefTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgAnlgEdgeRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerSlope , float64 triggerLevel , uInt32 pretriggerSamples ); 
fcns.thunkname{fcnNum}='longuint64cstringlongdoubleulongThunk';fcns.name{fcnNum}='DAQmxCfgAnlgEdgeRefTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgAnlgWindowRefTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerWhen , float64 windowTop , float64 windowBottom , uInt32 pretriggerSamples ); 
fcns.thunkname{fcnNum}='longuint64cstringlongdoubledoubleulongThunk';fcns.name{fcnNum}='DAQmxCfgAnlgWindowRefTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'double', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigPatternRefTrig ( TaskHandle taskHandle , const char triggerSource [], const char triggerPattern [], int32 triggerWhen , uInt32 pretriggerSamples ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringlongulongThunk';fcns.name{fcnNum}='DAQmxCfgDigPatternRefTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDisableAdvTrig ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxDisableAdvTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgDigEdgeAdvTrig ( TaskHandle taskHandle , const char triggerSource [], int32 triggerEdge ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxCfgDigEdgeAdvTrig'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetTrigAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetTrigAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetTrigAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetTrigAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetTrigAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetTrigAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSendSoftwareTrigger ( TaskHandle taskHandle , int32 triggerID ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSendSoftwareTrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadAnalogF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadAnalogScalarF64 ( TaskHandle taskHandle , float64 timeout , float64 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadAnalogScalarF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryI16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'int16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , int32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryI32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'longPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadBinaryU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt16 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'uint16Ptr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalScalarU32 ( TaskHandle taskHandle , float64 timeout , uInt32 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalScalarU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 fillMode , uInt8 readArray [], uInt32 arraySizeInBytes , int32 * sampsPerChanRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'uint8Ptr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCounterF64 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , float64 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoublevoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCounterF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCounterU32 ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , uInt32 readArray [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoublevoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCounterU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCounterScalarF64 ( TaskHandle taskHandle , float64 timeout , float64 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCounterScalarF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCounterScalarU32 ( TaskHandle taskHandle , float64 timeout , uInt32 * value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCounterScalarU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrFreq ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , float64 readArrayFrequency [], float64 readArrayDutyCycle [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'doublePtr', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrTime ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , float64 readArrayHighTime [], float64 readArrayLowTime [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'doublePtr', 'doublePtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrTicks ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , bool32 interleaved , uInt32 readArrayHighTicks [], uInt32 readArrayLowTicks [], uInt32 arraySizeInSamps , int32 * sampsPerChanRead , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoubleulongvoidPtrvoidPtrulongvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'ulong', 'ulongPtr', 'ulongPtr', 'ulong', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrFreqScalar ( TaskHandle taskHandle , float64 timeout , float64 * frequency , float64 * dutyCycle , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrFreqScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'doublePtr', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrTimeScalar ( TaskHandle taskHandle , float64 timeout , float64 * highTime , float64 * lowTime , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrTimeScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'doublePtr', 'doublePtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadCtrTicksScalar ( TaskHandle taskHandle , float64 timeout , uInt32 * highTicks , uInt32 * lowTicks , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadCtrTicksScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReadRaw ( TaskHandle taskHandle , int32 numSampsPerChan , float64 timeout , void * readArray , uInt32 arraySizeInBytes , int32 * sampsRead , int32 * numBytesPerSamp , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longdoublevoidPtrulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxReadRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'double', 'voidPtr', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetNthTaskReadChannel ( TaskHandle taskHandle , uInt32 index , char buffer [], int32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64ulongcstringlongThunk';fcns.name{fcnNum}='DAQmxGetNthTaskReadChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetReadAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetReadAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetReadAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetReadAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetReadAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxConfigureLogging ( TaskHandle taskHandle , const char filePath [], int32 loggingMode , const char groupName [], int32 operation ); 
fcns.thunkname{fcnNum}='longuint64cstringlongcstringlongThunk';fcns.name{fcnNum}='DAQmxConfigureLogging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxStartNewFile ( TaskHandle taskHandle , const char filePath []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxStartNewFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteAnalogF64 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteAnalogF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteAnalogScalarF64 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64ulongdoubledoublevoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteAnalogScalarF64'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryI16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryI16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'int16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryI32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const int32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryI32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'longPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteBinaryU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteBinaryU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU8 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU16 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt16 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'uint16Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalU32 ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalScalarU32 ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , uInt32 value , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64ulongdoubleulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalScalarU32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'double', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteDigitalLines ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt8 writeArray [], int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteDigitalLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'uint8Ptr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrFreq ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 frequency [], const float64 dutyCycle [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrFreqScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 frequency , float64 dutyCycle , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64ulongdoubledoubledoublevoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrFreqScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'double', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrTime ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const float64 highTime [], const float64 lowTime [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'doublePtr', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrTimeScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , float64 highTime , float64 lowTime , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64ulongdoubledoubledoublevoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrTimeScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'double', 'double', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrTicks ( TaskHandle taskHandle , int32 numSampsPerChan , bool32 autoStart , float64 timeout , bool32 dataLayout , const uInt32 highTicks [], const uInt32 lowTicks [], int32 * numSampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoubleulongvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'ulong', 'ulongPtr', 'ulongPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteCtrTicksScalar ( TaskHandle taskHandle , bool32 autoStart , float64 timeout , uInt32 highTicks , uInt32 lowTicks , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64ulongdoubleulongulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteCtrTicksScalar'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong', 'double', 'ulong', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteRaw ( TaskHandle taskHandle , int32 numSamps , bool32 autoStart , float64 timeout , const void * writeArray , int32 * sampsPerChanWritten , bool32 * reserved ); 
fcns.thunkname{fcnNum}='longuint64longulongdoublevoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxWriteRaw'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'ulong', 'double', 'voidPtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetWriteAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetWriteAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetWriteAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetWriteAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetWriteAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxExportSignal ( TaskHandle taskHandle , int32 signalID , const char outputTerminal []); 
fcns.thunkname{fcnNum}='longuint64longcstringThunk';fcns.name{fcnNum}='DAQmxExportSignal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetExportedSignalAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetExportedSignalAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSignalAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetExportedSignalAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateLinScale ( const char name [], float64 slope , float64 yIntercept , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringdoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateLinScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateMapScale ( const char name [], float64 prescaledMin , float64 prescaledMax , float64 scaledMin , float64 scaledMax , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringdoubledoubledoubledoublelongcstringThunk';fcns.name{fcnNum}='DAQmxCreateMapScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'double', 'double', 'double', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreatePolynomialScale ( const char name [], const float64 forwardCoeffs [], uInt32 numForwardCoeffsIn , const float64 reverseCoeffs [], uInt32 numReverseCoeffsIn , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongvoidPtrulonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreatePolynomialScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateTableScale ( const char name [], const float64 prescaledVals [], uInt32 numPrescaledValsIn , const float64 scaledVals [], uInt32 numScaledValsIn , int32 preScaledUnits , const char scaledUnits []); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongvoidPtrulonglongcstringThunk';fcns.name{fcnNum}='DAQmxCreateTableScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong', 'doublePtr', 'ulong', 'long', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCalculateReversePolyCoeff ( const float64 forwardCoeffs [], uInt32 numForwardCoeffsIn , float64 minValX , float64 maxValX , int32 numPointsToCompute , int32 reversePolyOrder , float64 reverseCoeffs []); 
fcns.thunkname{fcnNum}='longvoidPtrulongdoubledoublelonglongvoidPtrThunk';fcns.name{fcnNum}='DAQmxCalculateReversePolyCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'doublePtr', 'ulong', 'double', 'double', 'long', 'long', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetScaleAttribute ( const char scaleName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetScaleAttribute ( const char scaleName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgInputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxCfgInputBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgOutputBuffer ( TaskHandle taskHandle , uInt32 numSampsPerChan ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxCfgOutputBuffer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetBufferAttribute ( TaskHandle taskHandle , int32 attribute , void * value ); 
fcns.thunkname{fcnNum}='longuint64longvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetBufferAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetBufferAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetBufferAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetBufferAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetBufferAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchCreateScanList ( const char scanList [], TaskHandle * taskHandle ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchCreateScanList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchConnect ( const char switchChannel1 [], const char switchChannel2 [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchConnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchConnectMulti ( const char connectionList [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchConnectMulti'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchDisconnect ( const char switchChannel1 [], const char switchChannel2 [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchDisconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchDisconnectMulti ( const char connectionList [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchDisconnectMulti'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchDisconnectAll ( const char deviceName [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchDisconnectAll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchSetTopologyAndReset ( const char deviceName [], const char newTopology []); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxSwitchSetTopologyAndReset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchFindPath ( const char switchChannel1 [], const char switchChannel2 [], char path [], uInt32 pathBufferSize , int32 * pathStatus ); 
fcns.thunkname{fcnNum}='longcstringcstringcstringulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchFindPath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchOpenRelays ( const char relayList [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchOpenRelays'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchCloseRelays ( const char relayList [], bool32 waitForSettling ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSwitchCloseRelays'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchGetSingleRelayCount ( const char relayName [], uInt32 * count ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchGetSingleRelayCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchGetMultiRelayCount ( const char relayList [], uInt32 count [], uInt32 countArraySize , uInt32 * numRelayCountsRead ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchGetMultiRelayCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchGetSingleRelayPos ( const char relayName [], uInt32 * relayPos ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchGetSingleRelayPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchGetMultiRelayPos ( const char relayList [], uInt32 relayPos [], uInt32 relayPosArraySize , uInt32 * numRelayPossRead ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongvoidPtrThunk';fcns.name{fcnNum}='DAQmxSwitchGetMultiRelayPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSwitchWaitForSettling ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxSwitchWaitForSettling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetSwitchChanAttribute ( const char switchChannelName [], int32 attribute , void * value ); 
fcns.thunkname{fcnNum}='longcstringlongvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetSwitchChanAttribute ( const char switchChannelName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetSwitchDeviceAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetSwitchDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetSwitchDeviceAttribute ( const char deviceName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute , void * value ); 
fcns.thunkname{fcnNum}='longuint64longvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchScanAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetSwitchScanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSwitchScanAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetSwitchScanAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxConnectTerms ( const char sourceTerminal [], const char destinationTerminal [], int32 signalModifiers ); 
fcns.thunkname{fcnNum}='longcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxConnectTerms'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDisconnectTerms ( const char sourceTerminal [], const char destinationTerminal []); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxDisconnectTerms'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxTristateOutputTerm ( const char outputTerminal []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxTristateOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDevice ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxResetDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSelfTestDevice ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxSelfTestDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetDeviceAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetDeviceAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxCreateWatchdogTimerTask ( const char deviceName [], const char taskName [], TaskHandle * taskHandle , float64 timeout , const char lines [], int32 expState , ...); 
fcns.name{fcnNum}='DAQmxCreateWatchdogTimerTask'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint64Ptr', 'double', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCreateWatchdogTimerTaskEx ( const char deviceName [], const char taskName [], TaskHandle * taskHandle , float64 timeout ); 
fcns.thunkname{fcnNum}='longcstringcstringvoidPtrdoubleThunk';fcns.name{fcnNum}='DAQmxCreateWatchdogTimerTaskEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'uint64Ptr', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxControlWatchdogTask ( TaskHandle taskHandle , int32 action ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxControlWatchdogTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgWatchdogAOExpirStates ( TaskHandle taskHandle , const char channelNames [], const float64 expirStateArray [], const int32 outputTypeArray [], uInt32 arraySize ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxCfgWatchdogAOExpirStates'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgWatchdogCOExpirStates ( TaskHandle taskHandle , const char channelNames [], const int32 expirStateArray [], uInt32 arraySize ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxCfgWatchdogCOExpirStates'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCfgWatchdogDOExpirStates ( TaskHandle taskHandle , const char channelNames [], const int32 expirStateArray [], uInt32 arraySize ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxCfgWatchdogDOExpirStates'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetWatchdogAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetWatchdogAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogAttribute ( TaskHandle taskHandle , const char lines [], int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxResetWatchdogAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSelfCal ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxSelfCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxPerformBridgeOffsetNullingCal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxPerformBridgeOffsetNullingCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxPerformBridgeOffsetNullingCalEx ( TaskHandle taskHandle , const char channel [], bool32 skipUnsupportedChannels ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxPerformBridgeOffsetNullingCalEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxPerformThrmcplLeadOffsetNullingCal ( TaskHandle taskHandle , const char channel [], bool32 skipUnsupportedChannels ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxPerformThrmcplLeadOffsetNullingCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxPerformStrainShuntCal ( TaskHandle taskHandle , const char channel [], float64 shuntResistorValue , int32 shuntResistorLocation , bool32 skipUnsupportedChannels ); 
fcns.thunkname{fcnNum}='longuint64cstringdoublelongulongThunk';fcns.name{fcnNum}='DAQmxPerformStrainShuntCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxPerformBridgeShuntCal ( TaskHandle taskHandle , const char channel [], float64 shuntResistorValue , int32 shuntResistorLocation , float64 bridgeResistance , bool32 skipUnsupportedChannels ); 
fcns.thunkname{fcnNum}='longuint64cstringdoublelongdoubleulongThunk';fcns.name{fcnNum}='DAQmxPerformBridgeShuntCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double', 'long', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSelfCalLastDateAndTime ( const char deviceName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSelfCalLastDateAndTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExtCalLastDateAndTime ( const char deviceName [], uInt32 * year , uInt32 * month , uInt32 * day , uInt32 * hour , uInt32 * minute ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetExtCalLastDateAndTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxRestoreLastExtCalConst ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxRestoreLastExtCalConst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxESeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxESeriesCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxMSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxMSeriesCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxSSeriesCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSCBaseboardCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxSCBaseboardCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAOSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAOSeriesCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxXSeriesCalAdjust ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxXSeriesCalAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDeviceSupportsCal ( const char deviceName [], bool32 * calSupported ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxDeviceSupportsCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetCalInfoAttribute ( const char deviceName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetCalInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetCalInfoAttribute ( const char deviceName [], int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetCalInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxInitExtCal ( const char deviceName [], const char password [], CalHandle * calHandle ); 
fcns.thunkname{fcnNum}='longcstringcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxInitExtCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCloseExtCal ( CalHandle calHandle , int32 action ); 
fcns.thunkname{fcnNum}='longulonglongThunk';fcns.name{fcnNum}='DAQmxCloseExtCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxChangeExtCalPassword ( const char deviceName [], const char password [], const char newPassword []); 
fcns.thunkname{fcnNum}='longcstringcstringcstringThunk';fcns.name{fcnNum}='DAQmxChangeExtCalPassword'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDSASetCalTemp ( CalHandle calHandle , float64 temperature ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxDSASetCalTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustDSAAICal ( CalHandle calHandle , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjustDSAAICal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustDSAAICalEx ( CalHandle calHandle , float64 referenceVoltage , bool32 inputsShorted ); 
fcns.thunkname{fcnNum}='longulongdoubleulongThunk';fcns.name{fcnNum}='DAQmxAdjustDSAAICalEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustDSAAICalWithGainAndCoupling ( CalHandle calHandle , int32 coupling , float64 gain , float64 referenceVoltage ); 
fcns.thunkname{fcnNum}='longulonglongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjustDSAAICalWithGainAndCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustDSAAOCal ( CalHandle calHandle , uInt32 channel , float64 requestedLowVoltage , float64 actualLowVoltage , float64 requestedHighVoltage , float64 actualHighVoltage , float64 gainSetting ); 
fcns.thunkname{fcnNum}='longulongulongdoubledoubledoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjustDSAAOCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'ulong', 'double', 'double', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4610Cal ( CalHandle calHandle , const char channelName [], float64 gain , float64 offset ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4610Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustDSATimebaseCal ( CalHandle calHandle , float64 referenceFrequency ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjustDSATimebaseCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjustTIOTimebaseCal ( CalHandle calHandle , float64 referenceFrequency ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjustTIOTimebaseCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4204Cal ( CalHandle calHandle , const char channelNames [], float64 lowPassFreq , bool32 trackHoldEnabled , float64 inputVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4204Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4220Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4220Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4224Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4224Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4225Cal ( CalHandle calHandle , const char channelNames [], float64 gain , float64 inputVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4225Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup433xCal ( CalHandle calHandle , const char channelNames [], float64 excitationVoltage ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup433xCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust433xCal ( CalHandle calHandle , float64 refVoltage , float64 refExcitation , int32 shuntLocation ); 
fcns.thunkname{fcnNum}='longulongdoubledoublelongThunk';fcns.name{fcnNum}='DAQmxAdjust433xCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4300Cal ( CalHandle calHandle , float64 refVoltage ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4300Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4353Cal ( CalHandle calHandle , const char channelNames [], float64 refVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4353Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4357Cal ( CalHandle calHandle , const char channelNames [], const float64 refVals [], int32 numRefVals ); 
fcns.thunkname{fcnNum}='longulongcstringvoidPtrlongThunk';fcns.name{fcnNum}='DAQmxAdjust4357Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup4322Cal ( CalHandle calHandle , const char channelNames [], int32 outputType , float64 outputVal ); 
fcns.thunkname{fcnNum}='longulongcstringlongdoubleThunk';fcns.name{fcnNum}='DAQmxSetup4322Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust4322Cal ( CalHandle calHandle , const char channelNames [], float64 refVal ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust4322Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet4322CalAdjustPoints ( CalHandle calHandle , int32 outputType , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulonglongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet4322CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'long', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxConnectSCExpressCalAccChans ( CalHandle calHandle , const char channelNames [], const char connection []); 
fcns.thunkname{fcnNum}='longulongcstringcstringThunk';fcns.name{fcnNum}='DAQmxConnectSCExpressCalAccChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDisconnectSCExpressCalAccChans ( CalHandle calHandle ); 
fcns.thunkname{fcnNum}='longulongThunk';fcns.name{fcnNum}='DAQmxDisconnectSCExpressCalAccChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPossibleSCExpressCalAccConnections ( const char deviceName [], const char channelNames [], char * connections , uInt32 connectionsBufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPossibleSCExpressCalAccConnections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSCExpressCalAccBridgeOutput ( CalHandle calHandle , float64 voltsPerVolt ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxSetSCExpressCalAccBridgeOutput'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9201CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9201CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxCSeriesSetCalTemp ( CalHandle calHandle , float64 temperature ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxCSeriesSetCalTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9201Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9201Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9203CalAdjustPoints ( CalHandle calHandle , float64 rangeMin , float64 rangeMax , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongdoubledoublevoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9203CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9203GainCal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9203GainCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9203OffsetCal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9203OffsetCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9205Cal ( CalHandle calHandle , float64 value ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9205Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9206Cal ( CalHandle calHandle , float64 value ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9206Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9207CalAdjustPoints ( CalHandle calHandle , const char channelNames [], float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9207CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9207GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9207GainCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9207OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxAdjust9207OffsetCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9208CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9208CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9208GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9208GainCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9208OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxAdjust9208OffsetCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9211Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9211Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9213CalAdjustPoints ( CalHandle calHandle , float64 rangeMin , float64 rangeMax , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongdoubledoublevoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9213CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9213Cal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9213Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9214CalAdjustPoints ( CalHandle calHandle , const char channelNames [], float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9214CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9214Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9214Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9215CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9215CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9215Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9215Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9217CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9217CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9217Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9217Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup9219Cal ( CalHandle calHandle , const char channelNames [], float64 rangeMin , float64 rangeMax , int32 measType , int32 bridgeConfig ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoublelonglongThunk';fcns.name{fcnNum}='DAQmxSetup9219Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double', 'long', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9219CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9219CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9219Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9219Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9220CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9220CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9220Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9220Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9221CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9221CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9221Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9221Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9222CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9222CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9222Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9222Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9223CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9223CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9223Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9223Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9225CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9225CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9225Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9225Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9227CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9227CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9227Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9227Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9229CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9229CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9229Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9229Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9232CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9232CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9232Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9232Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9234CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9234CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9234GainCal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9234GainCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9234OffsetCal ( CalHandle calHandle , const char channelNames []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxAdjust9234OffsetCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9239CalAdjustPoints ( CalHandle calHandle , float64 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9239CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9239Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9239Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9263CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9263CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup9263Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.thunkname{fcnNum}='longulongcstringlongThunk';fcns.name{fcnNum}='DAQmxSetup9263Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9263Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9263Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9264CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9264CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup9264Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.thunkname{fcnNum}='longulongcstringlongThunk';fcns.name{fcnNum}='DAQmxSetup9264Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9264Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9264Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9265CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9265CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup9265Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.thunkname{fcnNum}='longulongcstringlongThunk';fcns.name{fcnNum}='DAQmxSetup9265Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9265Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9265Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGet9269CalAdjustPoints ( CalHandle calHandle , int32 * adjustmentPoints , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longulongvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGet9269CalAdjustPoints'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup9269Cal ( CalHandle calHandle , const char channelNames [], int32 value ); 
fcns.thunkname{fcnNum}='longulongcstringlongThunk';fcns.name{fcnNum}='DAQmxSetup9269Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust9269Cal ( CalHandle calHandle , const char channelNames [], float64 value ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust9269Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1102Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1102Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1102Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1102Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1104Cal ( CalHandle calHandle , const char channelName []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxSetup1104Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1104Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1104Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1112Cal ( CalHandle calHandle , const char channelName []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxSetup1112Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1112Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1112Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1122Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1122Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1122Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1122Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1124Cal ( CalHandle calHandle , const char channelName [], int32 range , uInt32 dacValue ); 
fcns.thunkname{fcnNum}='longulongcstringlongulongThunk';fcns.name{fcnNum}='DAQmxSetup1124Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'long', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1124Cal ( CalHandle calHandle , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1124Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1125Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1125Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1125Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1125Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1126Cal ( CalHandle calHandle , const char channelName [], float64 upperFreqLimit ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1126Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1126Cal ( CalHandle calHandle , float64 refFreq , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1126Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1141Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1141Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1141Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1141Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1142Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1142Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1142Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1142Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1143Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1143Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1143Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1143Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1502Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1502Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1502Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1502Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1503Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1503Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1503Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1503Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1503CurrentCal ( CalHandle calHandle , const char channelName [], float64 measCurrent ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1503CurrentCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1520Cal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup1520Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1520Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1520Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1521Cal ( CalHandle calHandle , const char channelName []); 
fcns.thunkname{fcnNum}='longulongcstringThunk';fcns.name{fcnNum}='DAQmxSetup1521Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1521Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust1521Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup153xCal ( CalHandle calHandle , const char channelName [], float64 gain ); 
fcns.thunkname{fcnNum}='longulongcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetup153xCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust153xCal ( CalHandle calHandle , float64 refVoltage , float64 measOutput ); 
fcns.thunkname{fcnNum}='longulongdoubledoubleThunk';fcns.name{fcnNum}='DAQmxAdjust153xCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetup1540Cal ( CalHandle calHandle , const char channelName [], float64 excitationVoltage , float64 excitationFreq ); 
fcns.thunkname{fcnNum}='longulongcstringdoubledoubleThunk';fcns.name{fcnNum}='DAQmxSetup1540Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'cstring', 'double', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAdjust1540Cal ( CalHandle calHandle , float64 refVoltage , float64 measOutput , int32 inputCalSource ); 
fcns.thunkname{fcnNum}='longulongdoubledoublelongThunk';fcns.name{fcnNum}='DAQmxAdjust1540Cal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'double', 'double', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxConfigureTEDS ( const char physicalChannel [], const char filePath []); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxConfigureTEDS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxClearTEDS ( const char physicalChannel []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxClearTEDS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteToTEDSFromArray ( const char physicalChannel [], const uInt8 bitStream [], uInt32 arraySize , int32 basicTEDSOptions ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulonglongThunk';fcns.name{fcnNum}='DAQmxWriteToTEDSFromArray'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr', 'ulong', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWriteToTEDSFromFile ( const char physicalChannel [], const char filePath [], int32 basicTEDSOptions ); 
fcns.thunkname{fcnNum}='longcstringcstringlongThunk';fcns.name{fcnNum}='DAQmxWriteToTEDSFromFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetPhysicalChanAttribute ( const char physicalChannel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPhysicalChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxWaitForNextSampleClock ( TaskHandle taskHandle , float64 timeout , bool32 * isLate ); 
fcns.thunkname{fcnNum}='longuint64doublevoidPtrThunk';fcns.name{fcnNum}='DAQmxWaitForNextSampleClock'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetRealTimeAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute , ...); 
fcns.name{fcnNum}='DAQmxSetRealTimeAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeAttribute ( TaskHandle taskHandle , int32 attribute ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxResetRealTimeAttribute'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% bool32 __stdcall DAQmxIsReadOrWriteLate ( int32 errorCode ); 
fcns.thunkname{fcnNum}='ulonglongThunk';fcns.name{fcnNum}='DAQmxIsReadOrWriteLate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSaveTask ( TaskHandle taskHandle , const char saveAs [], const char author [], uInt32 options ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxSaveTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSaveGlobalChan ( TaskHandle taskHandle , const char channelName [], const char saveAs [], const char author [], uInt32 options ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxSaveGlobalChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSaveScale ( const char scaleName [], const char saveAs [], const char author [], uInt32 options ); 
fcns.thunkname{fcnNum}='longcstringcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxSaveScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDeleteSavedTask ( const char taskName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxDeleteSavedTask'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDeleteSavedGlobalChan ( const char channelName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxDeleteSavedGlobalChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDeleteSavedScale ( const char scaleName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxDeleteSavedScale'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetPersistedTaskAttribute ( const char taskName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedTaskAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetPersistedChanAttribute ( const char channel [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedChanAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetPersistedScaleAttribute ( const char scaleName [], int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetPersistedScaleAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetSystemInfoAttribute ( int32 attribute , void * value , ...); 
fcns.name{fcnNum}='DAQmxGetSystemInfoAttribute'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'voidPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetDigitalPowerUpStates ( const char deviceName [], const char channelNames [], int32 state , ...); 
fcns.name{fcnNum}='DAQmxSetDigitalPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetDigitalPowerUpStates ( const char deviceName [], const char channelName [], int32 * state , ...); 
fcns.name{fcnNum}='DAQmxGetDigitalPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'longPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetDigitalPullUpPullDownStates ( const char deviceName [], const char channelName [], int32 state , ...); 
fcns.name{fcnNum}='DAQmxSetDigitalPullUpPullDownStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetDigitalPullUpPullDownStates ( const char deviceName [], const char channelName [], int32 * state , ...); 
fcns.name{fcnNum}='DAQmxGetDigitalPullUpPullDownStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'longPtr', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetAnalogPowerUpStates ( const char deviceName [], const char channelNames [], float64 state , int32 channelType , ...); 
fcns.name{fcnNum}='DAQmxSetAnalogPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'double', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxSetAnalogPowerUpStatesWithOutputType ( const char channelNames [], const float64 stateArray [], const int32 channelTypeArray [], uInt32 arraySize ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAnalogPowerUpStatesWithOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetAnalogPowerUpStates ( const char deviceName [], const char channelName [], float64 * state , int32 channelType , ...); 
fcns.name{fcnNum}='DAQmxGetAnalogPowerUpStates'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'doublePtr', 'long', 'error'};fcnNum=fcnNum+1;
% int32 __cdecl DAQmxGetAnalogPowerUpStatesWithOutputType ( const char channelNames [], float64 stateArray [], int32 channelTypeArray [], uInt32 * arraySizePtr ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnalogPowerUpStatesWithOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'longPtr', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigitalLogicFamilyPowerUpState ( const char deviceName [], int32 logicFamily ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='DAQmxSetDigitalLogicFamilyPowerUpState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigitalLogicFamilyPowerUpState ( const char deviceName [], int32 * logicFamily ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigitalLogicFamilyPowerUpState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAddNetworkDevice ( const char IPAddress [], const char deviceName [], bool32 attemptReservation , float64 timeout , char deviceNameOut [], uInt32 deviceNameOutBufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongdoublecstringulongThunk';fcns.name{fcnNum}='DAQmxAddNetworkDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong', 'double', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxDeleteNetworkDevice ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxDeleteNetworkDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxReserveNetworkDevice ( const char deviceName [], bool32 overrideReservation ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxReserveNetworkDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxUnreserveNetworkDevice ( const char deviceName []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxUnreserveNetworkDevice'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAutoConfigureCDAQSyncConnections ( const char chassisDevicesPorts [], float64 timeout ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxAutoConfigureCDAQSyncConnections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAutoConfiguredCDAQSyncConnections ( char portList [], uInt32 portListSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAutoConfiguredCDAQSyncConnections'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAreConfiguredCDAQSyncPortsDisconnected ( const char chassisDevicesPorts [], float64 timeout , bool32 * disconnectedPortsExist ); 
fcns.thunkname{fcnNum}='longcstringdoublevoidPtrThunk';fcns.name{fcnNum}='DAQmxAreConfiguredCDAQSyncPortsDisconnected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDisconnectedCDAQSyncPorts ( char portList [], uInt32 portListSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDisconnectedCDAQSyncPorts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxAddCDAQSyncConnection ( const char portList []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxAddCDAQSyncConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxRemoveCDAQSyncConnection ( const char portList []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxRemoveCDAQSyncConnection'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetErrorString ( int32 errorCode , char errorString [], uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longlongcstringulongThunk';fcns.name{fcnNum}='DAQmxGetErrorString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'long', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExtendedErrorInfo ( char errorString [], uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetExtendedErrorInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetBufInputBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetBufInputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetBufInputBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetBufInputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetBufInputBufSize ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetBufInputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetBufInputOnbrdBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetBufInputOnbrdBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetBufOutputBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetBufOutputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetBufOutputBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetBufOutputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetBufOutputBufSize ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetBufOutputBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetBufOutputOnbrdBufSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetBufOutputOnbrdBufSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetBufOutputOnbrdBufSize ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetBufOutputOnbrdBufSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSelfCalSupported ( const char deviceName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSelfCalSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSelfCalLastTemp ( const char deviceName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSelfCalLastTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExtCalRecommendedInterval ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetExtCalRecommendedInterval'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExtCalLastTemp ( const char deviceName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetExtCalLastTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCalUserDefinedInfo ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCalUserDefinedInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCalUserDefinedInfo ( const char deviceName [], const char * data ); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCalUserDefinedInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCalUserDefinedInfoMaxSize ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCalUserDefinedInfoMaxSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCalDevTemp ( const char deviceName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCalDevTemp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCalAccConnectionCount ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCalAccConnectionCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCalAccConnectionCount ( const char deviceName [], uInt32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetCalAccConnectionCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCalRecommendedAccConnectionCountLimit ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCalRecommendedAccConnectionCountLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMax ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMin ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMeasType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMeasType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVoltageUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVoltagedBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVoltagedBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVoltagedBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIVoltagedBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVoltagedBRef ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVoltagedBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVoltageACRMSUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVoltageACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAITempUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAITempUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAITempUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAITempUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAITempUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAITempUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmcplType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIThrmcplType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmcplType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmcplType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIThrmcplScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmcplScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmcplScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplCJCSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmcplCJCVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmcplCJCVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplCJCChan ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplCJCChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRTDType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRTDType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRTDType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIRTDType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRTDType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRTDType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRTDR0 ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRTDR0'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRTDR0 ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRTDR0'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRTDR0 ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRTDR0'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRTDA ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRTDA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRTDA ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRTDA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRTDA ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRTDA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRTDB ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRTDB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRTDB ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRTDB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRTDB ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRTDB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRTDC ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRTDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRTDC ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRTDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRTDC ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRTDC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmstrA ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmstrA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmstrA ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmstrA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmstrA ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmstrA'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmstrB ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmstrB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmstrB ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmstrB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmstrB ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmstrB'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmstrC ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmstrC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmstrC ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmstrC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmstrC ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmstrC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmstrR1 ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmstrR1'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmstrR1 ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmstrR1'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmstrR1 ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmstrR1'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIForceReadFromChan ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICurrentUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAICurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICurrentUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAICurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICurrentUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICurrentACRMSUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICurrentACRMSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIStrainUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIStrainUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIStrainUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIStrainUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIStrainUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIStrainUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIStrainGageForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIStrainGageForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIStrainGageForceReadFromChan ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIStrainGageForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIStrainGageForceReadFromChan ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIStrainGageForceReadFromChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIStrainGageGageFactor ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIStrainGageGageFactor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIStrainGagePoissonRatio ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIStrainGagePoissonRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIStrainGageCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIStrainGageCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIStrainGageCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIStrainGageCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIStrainGageCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIStrainGageCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRosetteStrainGageRosetteType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRosetteStrainGageRosetteType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRosetteStrainGageOrientation ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRosetteStrainGageOrientation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRosetteStrainGageOrientation ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRosetteStrainGageOrientation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRosetteStrainGageOrientation ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRosetteStrainGageOrientation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRosetteStrainGageStrainChans ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIRosetteStrainGageStrainChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRosetteStrainGageRosetteMeasType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRosetteStrainGageRosetteMeasType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRosetteStrainGageRosetteMeasType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIRosetteStrainGageRosetteMeasType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRosetteStrainGageRosetteMeasType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRosetteStrainGageRosetteMeasType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIResistanceUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIResistanceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIResistanceUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIResistanceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIResistanceUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIResistanceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIFreqThreshVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIFreqThreshVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIFreqHyst ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIFreqHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIFreqHyst ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIFreqHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIFreqHyst ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIFreqHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILVDTUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILVDTUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAILVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILVDTUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAILVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILVDTSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILVDTSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRVDTUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRVDTUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIRVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRVDTUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRVDTUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRVDTSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRVDTSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRVDTSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRVDTSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIEddyCurrentProxProbeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIEddyCurrentProxProbeSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIEddyCurrentProxProbeSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIEddyCurrentProxProbeSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAISoundPressureMaxSoundPressureLvl ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAISoundPressureMaxSoundPressureLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAISoundPressureUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAISoundPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAISoundPressureUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAISoundPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAISoundPressureUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAISoundPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAISoundPressuredBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAISoundPressuredBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAISoundPressuredBRef ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAISoundPressuredBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMicrophoneSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIMicrophoneSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAccelUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAccelUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAccelUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIAccelUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAccelUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAccelUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAcceldBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAcceldBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAcceldBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIAcceldBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAcceldBRef ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAcceldBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAccelSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAccelSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAccelSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIAccelSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAccelSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAccelSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAccelSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAccelSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVelocityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVelocityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVelocityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIVelocityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVelocityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVelocityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVelocityIEPESensordBRef ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVelocityIEPESensordBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVelocityIEPESensordBRef ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIVelocityIEPESensordBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVelocityIEPESensordBRef ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVelocityIEPESensordBRef'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVelocityIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVelocityIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVelocityIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIVelocityIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVelocityIEPESensorSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVelocityIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIVelocityIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIVelocityIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIVelocityIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIVelocityIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIVelocityIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIVelocityIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIForceUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIForceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIForceUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIForceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIForceUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIForceUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIForceIEPESensorSensitivity ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIForceIEPESensorSensitivity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIForceIEPESensorSensitivityUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIForceIEPESensorSensitivityUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIPressureUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIPressureUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIPressureUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIPressureUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAITorqueUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAITorqueUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAITorqueUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAITorqueUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAITorqueUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAITorqueUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeElectricalUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeElectricalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgePhysicalUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgePhysicalUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTwoPointLinFirstElectricalVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinFirstElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinFirstPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTwoPointLinSecondElectricalVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinSecondElectricalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTwoPointLinSecondPhysicalVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTableElectricalVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTableElectricalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeTablePhysicalVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeTablePhysicalVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgePolyForwardCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgePolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgePolyReverseCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgePolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIIsTEDS ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIIsTEDS'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAITEDSUnits ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAITEDSUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICoupling ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAICoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICoupling ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAICoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICoupling ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAITermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAITermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAITermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIInputSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIInputSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIInputSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAIInputSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIInputSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIInputSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIResistanceCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIResistanceCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIResistanceCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIResistanceCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIResistanceCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIResistanceCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILeadWireResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILeadWireResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILeadWireResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAILeadWireResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILeadWireResistance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILeadWireResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeNomResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeNomResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeNomResistance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeNomResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeInitialVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeInitialVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeInitialRatio ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeInitialRatio'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeShuntCalEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeShuntCalSelect ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalSelect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeShuntCalGainAdjust ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalGainAdjust'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeShuntCalShuntCalAResistance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalShuntCalAResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeShuntCalShuntCalAActualResistance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeShuntCalShuntCalAActualResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeBalanceCoarsePot ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeBalanceCoarsePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIBridgeBalanceFinePot ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIBridgeBalanceFinePot'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAICurrentShuntLoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAICurrentShuntLoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICurrentShuntLoc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICurrentShuntLoc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAICurrentShuntResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAICurrentShuntResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAICurrentShuntResistance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAICurrentShuntResistance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitUseForScaling ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitUseForScaling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitUseMultiplexed ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitUseMultiplexed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitActualVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitActualVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitActualVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitDCorAC ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitDCorAC ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitDCorAC'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIExcitVoltageOrCurrent ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIExcitVoltageOrCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIACExcitFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIACExcitFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIACExcitFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIACExcitFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIACExcitFreq ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIACExcitFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIACExcitSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIACExcitSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIACExcitWireMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIACExcitWireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIACExcitWireMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIACExcitWireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIACExcitWireMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIACExcitWireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIOpenThrmcplDetectEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIOpenThrmcplDetectEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIThrmcplLeadOffsetVoltage ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIThrmcplLeadOffsetVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAtten ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAtten ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAtten ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIProbeAtten ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIProbeAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIProbeAtten ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIProbeAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIProbeAtten ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIProbeAtten'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAILowpassEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassCutoffFreq ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassCutoffFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassSwitchCapClkSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassSwitchCapExtClkFreq ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapExtClkFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassSwitchCapExtClkDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapExtClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILowpassSwitchCapOutClkDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILowpassSwitchCapOutClkDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIFilterDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIFilterDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRemoveFilterDelay ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRemoveFilterDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAveragingWinSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAveragingWinSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAveragingWinSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIAveragingWinSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAveragingWinSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAveragingWinSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIResolutionUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIResolution ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRawSampSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRawSampSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRawSampJustification ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRawSampJustification'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIADCTimingMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIADCTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIADCTimingMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIADCTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIADCTimingMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIADCTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIADCCustomTimingMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIADCCustomTimingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDitherEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIDitherEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIDitherEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIDitherEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIDitherEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIDitherEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalHasValidCalInfo ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalHasValidCalInfo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalEnableCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalEnableCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalEnableCal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalEnableCal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalApplyCalIfExp ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalApplyCalIfExp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalScaleType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalScaleType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalScaleType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalTablePreScaledVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalTablePreScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalTableScaledVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalTableScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalPolyForwardCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalPolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalPolyReverseCoeff ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalPolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalOperatorName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalOperatorName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalOperatorName ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalOperatorName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalDesc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalDesc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalDesc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalDesc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalDesc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalDesc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalVerifRefVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalVerifRefVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIChanCalVerifAcqVals ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIChanCalVerifAcqVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRngHigh ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRngHigh ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRngHigh ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRngLow ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRngLow ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRngLow ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDCOffset ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIDCOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIDCOffset ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIDCOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIDCOffset ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIDCOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIGain ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIGain ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIGain ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAISampAndHoldEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAISampAndHoldEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAISampAndHoldEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAISampAndHoldEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIAutoZeroMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIAutoZeroMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIAutoZeroMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIAutoZeroMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIAutoZeroMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIAutoZeroMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIDataXferCustomThreshold ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIDataXferCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIRawDataCompressionType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIRawDataCompressionType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIRawDataCompressionType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIRawDataCompressionType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAILossyLSBRemovalCompressedSampSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAILossyLSBRemovalCompressedSampSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIDevScalingCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAIDevScalingCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIEnhancedAliasRejectionEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIEnhancedAliasRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOMax ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOMin ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOCustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAOCustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOCustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAOCustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOCustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOCustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOOutputType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOVoltageUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOVoltageUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOVoltageUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOVoltageCurrentLimit ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOVoltageCurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOCurrentUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOCurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOCurrentUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOCurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOCurrentUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOCurrentUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenFreq ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenAmplitude ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenAmplitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenOffset ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenOffset ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenOffset ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenSquareDutyCycle ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenSquareDutyCycle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenModulationType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenModulationType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenModulationType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenModulationType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOFuncGenFMDeviation ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOFuncGenFMDeviation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOOutputImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOOutputImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOOutputImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOOutputImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOOutputImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOOutputImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOLoadImpedance ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOLoadImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOLoadImpedance ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOLoadImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOLoadImpedance ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOLoadImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOIdleOutputBehavior ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOIdleOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOTermCfg ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOTermCfg ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOTermCfg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOResolutionUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOResolutionUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAOResolutionUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOResolutionUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOResolutionUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOResolution ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOResolution'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRngHigh ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRngHigh ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAODACRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRngHigh ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRngHigh'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRngLow ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRngLow ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAODACRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRngLow ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRngLow'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRefConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAODACRefConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRefConnToGnd ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRefConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRefAllowConnToGnd ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRefAllowConnToGnd'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRefSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRefSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRefSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAODACRefSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRefSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRefSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRefExtSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAODACRefExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRefExtSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAODACRefExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRefExtSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRefExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACRefVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACRefVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACRefVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAODACRefVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACRefVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACRefVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACOffsetSrc ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACOffsetSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACOffsetSrc ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAODACOffsetSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACOffsetSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACOffsetSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACOffsetExtSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACOffsetExtSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODACOffsetVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODACOffsetVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODACOffsetVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAODACOffsetVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODACOffsetVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODACOffsetVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOReglitchEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOReglitchEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOReglitchEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOReglitchEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOReglitchEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOReglitchEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOGain ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOGain ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAOGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOGain ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAODevScalingCoeff ( TaskHandle taskHandle , const char channel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAODevScalingCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOEnhancedImageRejectionEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAOEnhancedImageRejectionEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIInvertLines ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIInvertLines ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIInvertLines ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDINumLines ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDINumLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigFltrEnableBusMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigFltrEnableBusMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDITristate ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDITristate ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDITristate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDILogicFamily ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDILogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDILogicFamily ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDILogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDILogicFamily ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDILogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDIAcquireOn ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDIAcquireOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDIAcquireOn ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDIAcquireOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDIAcquireOn ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDIAcquireOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOOutputDriveType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOOutputDriveType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOOutputDriveType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOOutputDriveType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOOutputDriveType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOOutputDriveType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOInvertLines ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOInvertLines ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOInvertLines ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOInvertLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDONumLines ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDONumLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOTristate ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOTristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOTristate ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOTristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOTristate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOTristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOLineStatesStartState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOLineStatesStartState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOLineStatesStartState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOLineStatesStartState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOLineStatesStartState ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOLineStatesStartState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOLineStatesPausedState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOLineStatesPausedState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOLineStatesPausedState ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOLineStatesPausedState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOLineStatesDoneState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOLineStatesDoneState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOLineStatesDoneState ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOLineStatesDoneState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOLogicFamily ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOLogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOLogicFamily ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOLogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOLogicFamily ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOLogicFamily'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOOvercurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetDOOvercurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOOvercurrentLimit ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOOvercurrentLimit'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOOvercurrentAutoReenable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOOvercurrentAutoReenable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOOvercurrentReenablePeriod ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOOvercurrentReenablePeriod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetDOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDOGenerateOn ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDOGenerateOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDOGenerateOn ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDOGenerateOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDOGenerateOn ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDOGenerateOn'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIMax ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIMax ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIMax ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIMin ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIMin ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIMin ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICustomScaleName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICustomScaleName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICustomScaleName ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICustomScaleName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIMeasType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIMeasType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqMeasMeth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqEnableAveraging ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqMeasTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqMeasTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIFreqMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqMeasTime ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIFreqDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodMeasMeth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodMeasMeth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodEnableAveraging ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodEnableAveraging'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodMeasTime ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodMeasTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDir ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDir ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDir ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDir'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDirTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDirTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountDirDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountDirDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountDirDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesInitialCnt ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesInitialCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetResetCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetResetCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesCountResetDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesCountResetDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICountEdgesDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICountEdgesDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIAngEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIAngEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIAngEncoderUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIAngEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIAngEncoderPulsesPerRev ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIAngEncoderPulsesPerRev'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIAngEncoderInitialAngle ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIAngEncoderInitialAngle'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCILinEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCILinEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCILinEncoderUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCILinEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCILinEncoderUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCILinEncoderUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCILinEncoderDistPerPulse ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCILinEncoderDistPerPulse'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCILinEncoderInitialPos ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCILinEncoderInitialPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderDecodingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderDecodingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderDecodingType ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderDecodingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderAInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderAInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderBInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderBInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZInputDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZInputDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZIndexEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZIndexVal ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIEncoderZIndexPhase ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIEncoderZIndexPhase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseWidthDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseWidthDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITimestampUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITimestampUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITimestampUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCITimestampUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITimestampUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITimestampUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepFirstDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepFirstDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITwoEdgeSepSecondDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITwoEdgeSepSecondDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodStartingEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodStartingEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCISemiPeriodDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCISemiPeriodDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseFreqDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseFreqDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTimeDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTimeDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksStartEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksStartEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPulseTicksDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPulseTicksDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCITimestampInitialSeconds ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCITimestampInitialSeconds'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIGPSSyncMethod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIGPSSyncMethod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIGPSSyncMethod ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIGPSSyncMethod'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCIGPSSyncSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCIGPSSyncSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIGPSSyncSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIGPSSyncSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIOutputState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCITCReached ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCITCReached'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCICtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCICtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIDataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIDataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIDataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIDataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIDataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIDataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCINumPossiblyInvalidSamps ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCINumPossiblyInvalidSamps'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIDupCountPrevent ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIDupCountPrevent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIDupCountPrevent ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIDupCountPrevent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIDupCountPrevent ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIDupCountPrevent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCIPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCIPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCIPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCIPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCIPrescaler ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCIPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOOutputType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseIdleState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseIdleState ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseIdleState ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseTerm ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCOPulseTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseTerm ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCOPulseTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseTerm ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseTimeUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseTimeUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseHighTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseHighTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseHighTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseHighTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseHighTime ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseHighTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseLowTime ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseLowTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseLowTime ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseLowTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseLowTime ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseLowTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseTimeInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseTimeInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseDutyCyc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseDutyCyc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseDutyCyc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseDutyCyc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseFreqUnits ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseFreqUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseFreq ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseFreq ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseFreq ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseFreqInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseFreqInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseHighTicks ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseHighTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseHighTicks ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseHighTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseHighTicks ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseHighTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseLowTicks ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseLowTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseLowTicks ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseLowTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseLowTicks ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseLowTicks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPulseTicksInitialDelay ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPulseTicksInitialDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseActiveEdge ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseDigFltrEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseDigFltrTimebaseRate ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseDigSyncEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOOutputState ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOOutputState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOAutoIncrCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOAutoIncrCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOAutoIncrCnt ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOAutoIncrCnt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOCtrTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOCtrTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPulseDone ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPulseDone'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOEnableInitialDelayOnRetrigger ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOEnableInitialDelayOnRetrigger'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOConstrainedGenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCOConstrainedGenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOConstrainedGenMode ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOConstrainedGenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOUseOnlyOnBrdMem ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOUseOnlyOnBrdMem'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCODataXferMech ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCODataXferMech ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCODataXferMech ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCODataXferMech'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCODataXferReqCond ( TaskHandle taskHandle , const char channel [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetCODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCODataXferReqCond ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCODataXferReqCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOUsbXferReqSize ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOUsbXferReqSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOUsbXferReqCount ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOUsbXferReqCount ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOUsbXferReqCount'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOMemMapEnable ( TaskHandle taskHandle , const char channel [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOMemMapEnable ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOMemMapEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCOPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCOPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetCOPrescaler ( TaskHandle taskHandle , const char channel [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetCOPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetCOPrescaler ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetCOPrescaler'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCORdyForNewVal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCORdyForNewVal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChanType ( TaskHandle taskHandle , const char channel [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetChanType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanName ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetPhysicalChanName ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetPhysicalChanName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChanDescr ( TaskHandle taskHandle , const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetChanDescr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetChanDescr ( TaskHandle taskHandle , const char channel [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetChanDescr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetChanDescr ( TaskHandle taskHandle , const char channel []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetChanDescr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChanIsGlobal ( TaskHandle taskHandle , const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetChanIsGlobal'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAIConvClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAIConvClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAIConvClkOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAIConvClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAIConvClkPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAIConvClkPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExported10MHzRefClkOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExported10MHzRefClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExported20MHzTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExported20MHzTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSampClkOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSampClkOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSampClkOutputBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSampClkOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSampClkOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSampClkOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSampClkOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSampClkOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSampClkDelayOffset ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSampClkDelayOffset ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSampClkDelayOffset ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSampClkDelayOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSampClkPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSampClkPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSampClkPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSampClkPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSampClkTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedDividedSampClkTimebaseOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedDividedSampClkTimebaseOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvTrigPulseWidthUnits ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvTrigPulseWidthUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvTrigPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvTrigPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvTrigPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvTrigPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedPauseTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedPauseTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedPauseTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedPauseTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedPauseTrigLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedPauseTrigLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRefTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRefTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRefTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRefTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRefTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRefTrigPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRefTrigPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRefTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedStartTrigOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedStartTrigOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedStartTrigOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedStartTrigOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedStartTrigPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedStartTrigPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedStartTrigPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedStartTrigPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvCmpltEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvCmpltEventDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvCmpltEventDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvCmpltEventDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvCmpltEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAdvCmpltEventPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAdvCmpltEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAIHoldCmpltEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAIHoldCmpltEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedAIHoldCmpltEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedAIHoldCmpltEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedChangeDetectEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedChangeDetectEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedChangeDetectEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedChangeDetectEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedCtrOutEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedCtrOutEventOutputBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedCtrOutEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedCtrOutEventToggleIdleState ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedCtrOutEventToggleIdleState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventOutputBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventOutputBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventOutputBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventOutputBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventInterlockedAssertedLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventInterlockedAssertOnStart ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedAssertOnStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventInterlockedDeassertDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventInterlockedDeassertDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventPulsePolarity ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventPulsePolarity ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventPulsePolarity ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventPulsePolarity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedHshkEventPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedHshkEventPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedHshkEventPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedHshkEventPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForXferEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForXferEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForXferEventDeassertCond ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventDeassertCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForXferEventDeassertCondCustomThreshold'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedDataActiveEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedDataActiveEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedDataActiveEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedDataActiveEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForStartEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForStartEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedRdyForStartEventLvlActiveLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedRdyForStartEventLvlActiveLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedSyncPulseEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedSyncPulseEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetExportedWatchdogExpiredEventOutputTerm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetExportedWatchdogExpiredEventOutputTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevIsSimulated ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevIsSimulated'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevProductCategory ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevProductCategory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevProductType ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevProductType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevProductNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevProductNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevSerialNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevSerialNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAccessoryProductTypes ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevAccessoryProductTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAccessoryProductNums ( const char device [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAccessoryProductNums'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAccessorySerialNums ( const char device [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAccessorySerialNums'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetCarrierSerialNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetCarrierSerialNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevChassisModuleDevNames ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevChassisModuleDevNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAnlgTrigSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAnlgTrigSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDigTrigSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevDigTrigSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAISupportedMeasTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAISupportedMeasTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxSingleChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxSingleChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMaxMultiChanRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMaxMultiChanRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIMinRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAIMinRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAISimultaneousSamplingSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAISimultaneousSamplingSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAISampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAISampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAITrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAITrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIVoltageRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIVoltageRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIVoltageIntExcitDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIVoltageIntExcitDiscreteVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIVoltageIntExcitRangeVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIVoltageIntExcitRangeVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAICurrentRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAICurrentRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAICurrentIntExcitDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAICurrentIntExcitDiscreteVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIBridgeRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIBridgeRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIResistanceRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIResistanceRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIFreqRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIFreqRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAIGains ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAIGains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAICouplings ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAICouplings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAILowpassCutoffFreqDiscreteVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAILowpassCutoffFreqDiscreteVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAILowpassCutoffFreqRangeVals ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAILowpassCutoffFreqRangeVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOSupportedOutputTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOSupportedOutputTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOSampClkSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAOSampClkSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOSampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOSampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOMaxRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAOMaxRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOMinRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAOMinRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOTrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevAOTrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOVoltageRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOVoltageRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOCurrentRngs ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOCurrentRngs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevAOGains ( const char device [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevAOGains'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDILines ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevDILines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDIPorts ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevDIPorts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDIMaxRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevDIMaxRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDITrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevDITrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDOLines ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevDOLines'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDOPorts ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevDOPorts'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDOMaxRate ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevDOMaxRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevDOTrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevDOTrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCIPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevCIPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCISupportedMeasTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevCISupportedMeasTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCITrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCITrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCISampClkSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCISampClkSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCISampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevCISampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCIMaxSize ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCIMaxSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCIMaxTimebase ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCIMaxTimebase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOPhysicalChans ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevCOPhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOSupportedOutputTypes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevCOSupportedOutputTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOSampClkSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCOSampClkSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOSampModes ( const char device [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetDevCOSampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOTrigUsage ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCOTrigUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOMaxSize ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCOMaxSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCOMaxTimebase ( const char device [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCOMaxTimebase'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevTEDSHWTEDSSupported ( const char device [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevTEDSHWTEDSSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevNumDMAChans ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevNumDMAChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevBusType ( const char device [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevBusType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPCIBusNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPCIBusNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPCIDevNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPCIDevNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPXIChassisNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPXIChassisNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevPXISlotNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevPXISlotNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCompactDAQChassisDevName ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevCompactDAQChassisDevName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevCompactDAQSlotNum ( const char device [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDevCompactDAQSlotNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevTCPIPHostname ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevTCPIPHostname'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevTCPIPEthernetIP ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevTCPIPEthernetIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevTCPIPWirelessIP ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevTCPIPWirelessIP'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDevTerminals ( const char device [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetDevTerminals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadRelativeTo ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadRelativeTo ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetReadRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadRelativeTo ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOffset ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadOffset ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetReadOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadOffset ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadChannelsToRead ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadChannelsToRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadChannelsToRead ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetReadChannelsToRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadChannelsToRead ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadChannelsToRead'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadReadAllAvailSamp ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadReadAllAvailSamp ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadReadAllAvailSamp ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadReadAllAvailSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadAutoStart ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadAutoStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadAutoStart ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetReadAutoStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadAutoStart ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadAutoStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOverWrite ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOverWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadOverWrite ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetReadOverWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadOverWrite ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadOverWrite'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadCurrReadPos ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadCurrReadPos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadAvailSampPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadAvailSampPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingFilePath ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetLoggingFilePath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingFilePath ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetLoggingFilePath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingFilePath ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingFilePath'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetLoggingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingTDMSGroupName ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingTDMSGroupName ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingTDMSGroupName ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingTDMSGroupName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingTDMSOperation ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingTDMSOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingTDMSOperation ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetLoggingTDMSOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingTDMSOperation ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingTDMSOperation'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingPause ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingPause ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetLoggingPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingPause ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingPause'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingSampsPerFile ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingSampsPerFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingSampsPerFile ( TaskHandle taskHandle , uInt64 data ); 
fcns.thunkname{fcnNum}='longuint64uint64Thunk';fcns.name{fcnNum}='DAQmxSetLoggingSampsPerFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingSampsPerFile ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingSampsPerFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingFileWriteSize ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingFileWriteSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingFileWriteSize ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetLoggingFileWriteSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingFileWriteSize ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingFileWriteSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetLoggingFilePreallocationSize ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetLoggingFilePreallocationSize ( TaskHandle taskHandle , uInt64 data ); 
fcns.thunkname{fcnNum}='longuint64uint64Thunk';fcns.name{fcnNum}='DAQmxSetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetLoggingFilePreallocationSize ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetLoggingFilePreallocationSize'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadTotalSampPerChanAcquired ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadTotalSampPerChanAcquired'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadCommonModeRangeErrorChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadCommonModeRangeErrorChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadCommonModeRangeErrorChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadCommonModeRangeErrorChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOvercurrentChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOvercurrentChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOvercurrentChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadOvercurrentChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOpenCurrentLoopChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOpenCurrentLoopChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOpenCurrentLoopChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadOpenCurrentLoopChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOpenThrmcplChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOpenThrmcplChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOpenThrmcplChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadOpenThrmcplChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOverloadedChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadOverloadedChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadOverloadedChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadOverloadedChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadAccessoryInsertionOrRemovalDetected ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadAccessoryInsertionOrRemovalDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadDevsWithInsertedOrRemovedAccessories ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetReadDevsWithInsertedOrRemovedAccessories'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadChangeDetectHasOverflowed ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadChangeDetectHasOverflowed'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadRawDataWidth ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadRawDataWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadNumChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadDigitalLinesBytesPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadDigitalLinesBytesPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetReadWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadWaitMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetReadSleepTime ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetReadSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetReadSleepTime ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetReadSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetReadSleepTime ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetReadSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeConvLateErrorsToWarnings ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRealTimeConvLateErrorsToWarnings'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRealTimeNumOfWarmupIters ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRealTimeNumOfWarmupIters ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeNumOfWarmupIters ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRealTimeNumOfWarmupIters'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeWaitForNextSampClkWaitMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRealTimeWaitForNextSampClkWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRealTimeReportMissedSamp ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRealTimeReportMissedSamp ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeReportMissedSamp ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRealTimeReportMissedSamp'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRealTimeWriteRecoveryMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRealTimeWriteRecoveryMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRealTimeWriteRecoveryMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRealTimeWriteRecoveryMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanUsage ( const char switchChannelName [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchChanUsage ( const char switchChannelName [], int32 data ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='DAQmxSetSwitchChanUsage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanAnlgBusSharingEnable ( const char switchChannelName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanAnlgBusSharingEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchChanAnlgBusSharingEnable ( const char switchChannelName [], bool32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetSwitchChanAnlgBusSharingEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxACCarryCurrent ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACCarryCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxACSwitchCurrent ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACSwitchCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxACCarryPwr ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACCarryPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxACSwitchPwr ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACSwitchPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxDCCarryCurrent ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCCarryCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxDCSwitchCurrent ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCSwitchCurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxDCCarryPwr ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCCarryPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxDCSwitchPwr ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCSwitchPwr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxACVoltage ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxACVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanMaxDCVoltage ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanMaxDCVoltage'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanWireMode ( const char switchChannelName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanWireMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanBandwidth ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanBandwidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchChanImpedance ( const char switchChannelName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchChanImpedance'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevSettlingTime ( const char deviceName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevSettlingTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchDevSettlingTime ( const char deviceName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetSwitchDevSettlingTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevAutoConnAnlgBus ( const char deviceName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevAutoConnAnlgBus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchDevAutoConnAnlgBus ( const char deviceName [], bool32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetSwitchDevAutoConnAnlgBus'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling ( const char deviceName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevPwrDownLatchRelaysAfterSettling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling ( const char deviceName [], bool32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetSwitchDevPwrDownLatchRelaysAfterSettling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevSettled ( const char deviceName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevSettled'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevRelayList ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevRelayList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevNumRelays ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevNumRelays'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevSwitchChanList ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevSwitchChanList'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevNumSwitchChans ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevNumSwitchChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevNumRows ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevNumRows'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevNumColumns ( const char deviceName [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevNumColumns'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevTopology ( const char deviceName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevTopology'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchDevTemperature ( const char deviceName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchDevTemperature'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchScanBreakMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchScanBreakMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchScanBreakMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSwitchScanBreakMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSwitchScanBreakMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSwitchScanBreakMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchScanRepeatMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSwitchScanRepeatMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSwitchScanRepeatMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSwitchScanRepeatMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSwitchScanWaitingForAdv ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSwitchScanWaitingForAdv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleDescr ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetScaleDescr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleDescr ( const char scaleName [], const char * data ); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxSetScaleDescr'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleScaledUnits ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetScaleScaledUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleScaledUnits ( const char scaleName [], const char * data ); 
fcns.thunkname{fcnNum}='longcstringcstringThunk';fcns.name{fcnNum}='DAQmxSetScaleScaledUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScalePreScaledUnits ( const char scaleName [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScalePreScaledUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScalePreScaledUnits ( const char scaleName [], int32 data ); 
fcns.thunkname{fcnNum}='longcstringlongThunk';fcns.name{fcnNum}='DAQmxSetScalePreScaledUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleType ( const char scaleName [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleLinSlope ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleLinSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleLinSlope ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleLinSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleLinYIntercept ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleLinYIntercept'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleLinYIntercept ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleLinYIntercept'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleMapScaledMax ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleMapScaledMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleMapScaledMax ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleMapScaledMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleMapPreScaledMax ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleMapPreScaledMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleMapPreScaledMax ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleMapPreScaledMax'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleMapScaledMin ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleMapScaledMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleMapScaledMin ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleMapScaledMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleMapPreScaledMin ( const char scaleName [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetScaleMapPreScaledMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleMapPreScaledMin ( const char scaleName [], float64 data ); 
fcns.thunkname{fcnNum}='longcstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetScaleMapPreScaledMin'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScalePolyForwardCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetScalePolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScalePolyForwardCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetScalePolyForwardCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScalePolyReverseCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetScalePolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScalePolyReverseCoeff ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetScalePolyReverseCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleTableScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetScaleTableScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleTableScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetScaleTableScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetScaleTablePreScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetScaleTablePreScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetScaleTablePreScaledVals ( const char scaleName [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxSetScaleTablePreScaledVals'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysGlobalChans ( char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSysGlobalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysScales ( char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSysScales'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysTasks ( char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSysTasks'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysDevNames ( char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxGetSysDevNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysNIDAQMajorVersion ( uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSysNIDAQMajorVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysNIDAQMinorVersion ( uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSysNIDAQMinorVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSysNIDAQUpdateVersion ( uInt32 * data ); 
fcns.thunkname{fcnNum}='longvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetSysNIDAQUpdateVersion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskName ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetTaskName'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskChannels ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetTaskChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetTaskNumChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskDevices ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetTaskDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskNumDevices ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetTaskNumDevices'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTaskComplete ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetTaskComplete'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampQuantSampMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampQuantSampMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampQuantSampMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampQuantSampMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampQuantSampMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampQuantSampMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampQuantSampPerChan ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampQuantSampPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampQuantSampPerChan ( TaskHandle taskHandle , uInt64 data ); 
fcns.thunkname{fcnNum}='longuint64uint64Thunk';fcns.name{fcnNum}='DAQmxSetSampQuantSampPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampQuantSampPerChan ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampQuantSampPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampTimingType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampTimingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampTimingType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampTimingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampTimingType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampTimingType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkMaxRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkMaxRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSampClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetSampClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampClkActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkActiveEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkOverrunBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkOverrunBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkOverrunBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkOverrunBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkUnderflowBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkUnderflowBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkUnderflowBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimebaseDiv ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSampClkTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimebaseActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimebaseActiveEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimebaseActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimebaseMasterTimebaseDiv ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimebaseMasterTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimebaseTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimebaseTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetHshkDelayAfterXfer ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetHshkDelayAfterXfer ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetHshkDelayAfterXfer ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetHshkDelayAfterXfer'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetHshkStartCond ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetHshkStartCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetHshkStartCond ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetHshkStartCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetHshkStartCond ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetHshkStartCond'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetHshkSampleInputDataWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetHshkSampleInputDataWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetHshkSampleInputDataWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetHshkSampleInputDataWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetChangeDetectDIRisingEdgePhysicalChans ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetChangeDetectDIRisingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetChangeDetectDIFallingEdgePhysicalChans ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetChangeDetectDIFallingEdgePhysicalChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetChangeDetectDITristate ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetChangeDetectDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetChangeDetectDITristate ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetChangeDetectDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetChangeDetectDITristate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetChangeDetectDITristate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetOnDemandSimultaneousAOEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetOnDemandSimultaneousAOEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetImplicitUnderflowBehavior ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetImplicitUnderflowBehavior ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetImplicitUnderflowBehavior ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetImplicitUnderflowBehavior'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvRateEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvMaxRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvMaxRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvMaxRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvMaxRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIConvSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAIConvSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIConvSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAIConvSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvActiveEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvActiveEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAIConvActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvActiveEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvActiveEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvActiveEdgeEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvActiveEdgeEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvTimebaseDiv ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvTimebaseDiv ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvTimebaseDiv ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvTimebaseDiv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames [], uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvTimebaseDivEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvTimebaseDivEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvTimebaseSrc ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvTimebaseSrc ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDelayFromSampClkDelayUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDelayFromSampClkDelayUnits ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDelayFromSampClkDelayUnits ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDelayFromSampClkDelayUnitsEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayUnitsEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDelayFromSampClkDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDelayFromSampClkDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDelayFromSampClkDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDelayFromSampClkDelayEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetDelayFromSampClkDelayEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrEnableEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrMinPulseWidthEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrMinPulseWidthEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames [], const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringcstringThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrTimebaseSrcEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseSrcEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigFltrTimebaseRateEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvDigFltrTimebaseRateEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAIConvDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames [], bool32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxSetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAIConvDigSyncEnableEx ( TaskHandle taskHandle , const char deviceNames []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetAIConvDigSyncEnableEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetMasterTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetMasterTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetMasterTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetMasterTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetMasterTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetMasterTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetMasterTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetMasterTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetMasterTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetMasterTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetMasterTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetMasterTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefClkRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefClkRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetRefClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefClkRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefClkRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefClkSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetRefClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefClkSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetRefClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefClkSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefClkSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSyncPulseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetSyncPulseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSyncPulseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSyncPulseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseSyncTime ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseSyncTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseMinDelayToStart ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSyncPulseMinDelayToStart ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSyncPulseMinDelayToStart ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSyncPulseMinDelayToStart'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseResetTime ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseResetTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseResetDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseResetDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSyncPulseResetDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetSyncPulseResetDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSyncPulseResetDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSyncPulseResetDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncPulseTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetSyncPulseTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSyncClkInterval ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSyncClkInterval'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSyncClkInterval ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSyncClkInterval'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSyncClkInterval ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSyncClkInterval'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampTimingEngine ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampTimingEngine ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampTimingEngine ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampTimingEngine'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetStartTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetStartTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetStartTrigTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternStartTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternStartTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternStartTrigPattern ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternStartTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternStartTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternStartTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigSlope ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigHyst ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigTop ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigBtm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetStartTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetStartTrigDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetStartTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetStartTrigDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetStartTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigDelayUnits ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetStartTrigDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetStartTrigDelayUnits ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetStartTrigDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetStartTrigDelayUnits ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetStartTrigDelayUnits'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetStartTrigRetriggerable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetStartTrigRetriggerable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetStartTrigRetriggerable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetStartTrigRetriggerable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetStartTrigRetriggerable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetStartTrigRetriggerable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetRefTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigPretrigSamples ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefTrigPretrigSamples ( TaskHandle taskHandle , uInt32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefTrigPretrigSamples ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefTrigPretrigSamples'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetRefTrigTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternRefTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternRefTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternRefTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternRefTrigPattern ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternRefTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternRefTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternRefTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigSlope ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigSlope'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigHyst ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgEdgeRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgEdgeRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigTop ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigBtm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinRefTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinRefTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigAutoTrigEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefTrigAutoTrigEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefTrigAutoTrigEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefTrigAutoTrigEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigAutoTriggered ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefTrigAutoTriggered'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetRefTrigDelay ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetRefTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetRefTrigDelay ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetRefTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetRefTrigDelay ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetRefTrigDelay'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAdvTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAdvTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAdvTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAdvTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAdvTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAdvTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeAdvTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeAdvTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeAdvTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeAdvTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeAdvTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeAdvTrigEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeAdvTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeAdvTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetHshkTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetHshkTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetHshkTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetHshkTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetHshkTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetHshkTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetInterlockedHshkTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetInterlockedHshkTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetInterlockedHshkTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetInterlockedHshkTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetInterlockedHshkTrigAssertedLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetInterlockedHshkTrigAssertedLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPauseTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetPauseTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetPauseTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetPauseTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetPauseTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetPauseTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPauseTrigTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetPauseTrigTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigLvl ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigLvl'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigHyst ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigHyst'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigTop ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigTop ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigTop ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigTop'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigBtm ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigBtm ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigBtm ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigBtm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigCoupling ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigCoupling'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAnlgWinPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetAnlgWinPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigLvlPauseTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigLvlPauseTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternPauseTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternPauseTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternPauseTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternPauseTrigPattern ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternPauseTrigPattern ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternPauseTrigPattern ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigPattern'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigPatternPauseTrigWhen ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigPatternPauseTrigWhen ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigPatternPauseTrigWhen ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigPatternPauseTrigWhen'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetArmStartTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetArmStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetArmStartTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetArmStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetArmStartTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetArmStartTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetArmStartTerm ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetArmStartTerm'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigDigFltrEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrMinPulseWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigFltrTimebaseRate'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeArmStartTrigDigSyncEnable ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeArmStartTrigDigSyncEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetTriggerSyncType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetTriggerSyncType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetTriggerSyncType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetTriggerSyncType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetTriggerSyncType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetTriggerSyncType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogTimeout ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogTimeout ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetWatchdogTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogTimeout ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWatchdogTimeout'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogExpirTrigType ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogExpirTrigType ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogExpirTrigType ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWatchdogExpirTrigType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogExpirTrigTrigOnNetworkConnLoss'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetWatchdogExpirTrigTrigOnNetworkConnLoss'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWatchdogExpirTrigTrigOnNetworkConnLoss'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle , const char * data ); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeWatchdogExpirTrigSrc ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeWatchdogExpirTrigSrc'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetDigEdgeWatchdogExpirTrigEdge ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetDigEdgeWatchdogExpirTrigEdge'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogDOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetWatchdogDOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogDOExpirState ( TaskHandle taskHandle , const char lines []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetWatchdogDOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogAOOutputType ( TaskHandle taskHandle , const char lines [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogAOOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogAOOutputType ( TaskHandle taskHandle , const char lines [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetWatchdogAOOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogAOOutputType ( TaskHandle taskHandle , const char lines []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetWatchdogAOOutputType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogAOExpirState ( TaskHandle taskHandle , const char lines [], float64 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogAOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogAOExpirState ( TaskHandle taskHandle , const char lines [], float64 data ); 
fcns.thunkname{fcnNum}='longuint64cstringdoubleThunk';fcns.name{fcnNum}='DAQmxSetWatchdogAOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogAOExpirState ( TaskHandle taskHandle , const char lines []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetWatchdogAOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogCOExpirState ( TaskHandle taskHandle , const char lines [], int32 * data ); 
fcns.thunkname{fcnNum}='longuint64cstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogCOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWatchdogCOExpirState ( TaskHandle taskHandle , const char lines [], int32 data ); 
fcns.thunkname{fcnNum}='longuint64cstringlongThunk';fcns.name{fcnNum}='DAQmxSetWatchdogCOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWatchdogCOExpirState ( TaskHandle taskHandle , const char lines []); 
fcns.thunkname{fcnNum}='longuint64cstringThunk';fcns.name{fcnNum}='DAQmxResetWatchdogCOExpirState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWatchdogHasExpired ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWatchdogHasExpired'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteRelativeTo ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteRelativeTo ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetWriteRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteRelativeTo ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteRelativeTo'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOffset ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteOffset ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetWriteOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteOffset ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteRegenMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteRegenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteRegenMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetWriteRegenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteRegenMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteRegenMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteCurrWritePos ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteCurrWritePos'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOvercurrentChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteOvercurrentChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOvercurrentChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetWriteOvercurrentChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOvertemperatureChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteOvertemperatureChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOpenCurrentLoopChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteOpenCurrentLoopChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteOpenCurrentLoopChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetWriteOpenCurrentLoopChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWritePowerSupplyFaultChansExist ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWritePowerSupplyFaultChansExist'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWritePowerSupplyFaultChans ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetWritePowerSupplyFaultChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteSpaceAvail ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteSpaceAvail'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteTotalSampPerChanGenerated ( TaskHandle taskHandle , uInt64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteTotalSampPerChanGenerated'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteRawDataWidth ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteRawDataWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteNumChans ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteNumChans'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteWaitMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteWaitMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetWriteWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteWaitMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteWaitMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteSleepTime ( TaskHandle taskHandle , float64 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteSleepTime ( TaskHandle taskHandle , float64 data ); 
fcns.thunkname{fcnNum}='longuint64doubleThunk';fcns.name{fcnNum}='DAQmxSetWriteSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'double'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteSleepTime ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteSleepTime'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteNextWriteIsLast ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetWriteNextWriteIsLast ( TaskHandle taskHandle , bool32 data ); 
fcns.thunkname{fcnNum}='longuint64ulongThunk';fcns.name{fcnNum}='DAQmxSetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetWriteNextWriteIsLast ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetWriteNextWriteIsLast'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteDigitalLinesBytesPerChan ( TaskHandle taskHandle , uInt32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteDigitalLinesBytesPerChan'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteAccessoryInsertionOrRemovalDetected ( TaskHandle taskHandle , bool32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetWriteAccessoryInsertionOrRemovalDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetWriteDevsWithInsertedOrRemovedAccessories ( TaskHandle taskHandle , char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longuint64cstringulongThunk';fcns.name{fcnNum}='DAQmxGetWriteDevsWithInsertedOrRemovedAccessories'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAISupportedMeasTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAISupportedMeasTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAITermCfgs ( const char physicalChannel [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAITermCfgs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAIInputSrcs ( const char physicalChannel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAIInputSrcs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOSupportedOutputTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOSupportedOutputTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOSupportedPowerUpOutputTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOSupportedPowerUpOutputTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOTermCfgs ( const char physicalChannel [], int32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOTermCfgs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOManualControlEnable ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetPhysicalChanAOManualControlEnable ( const char physicalChannel [], bool32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetPhysicalChanAOManualControlEnable ( const char physicalChannel []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxResetPhysicalChanAOManualControlEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOManualControlShortDetected ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlShortDetected'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOManualControlAmplitude ( const char physicalChannel [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlAmplitude'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanAOManualControlFreq ( const char physicalChannel [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanAOManualControlFreq'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOPowerAmpChannelEnable ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOPowerAmpChannelEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetAOPowerAmpChannelEnable ( const char physicalChannel [], bool32 data ); 
fcns.thunkname{fcnNum}='longcstringulongThunk';fcns.name{fcnNum}='DAQmxSetAOPowerAmpChannelEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetAOPowerAmpChannelEnable ( const char physicalChannel []); 
fcns.thunkname{fcnNum}='longcstringThunk';fcns.name{fcnNum}='DAQmxResetAOPowerAmpChannelEnable'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOPowerAmpScalingCoeff ( const char physicalChannel [], float64 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetAOPowerAmpScalingCoeff'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOPowerAmpOvercurrent ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOPowerAmpOvercurrent'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOPowerAmpGain ( const char physicalChannel [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOPowerAmpGain'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetAOPowerAmpOffset ( const char physicalChannel [], float64 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetAOPowerAmpOffset'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDIPortWidth ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDIPortWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDISampClkSupported ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDISampClkSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDISampModes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDISampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDIChangeDetectSupported ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDIChangeDetectSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDOPortWidth ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDOPortWidth'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDOSampClkSupported ( const char physicalChannel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDOSampClkSupported'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanDOSampModes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanDOSampModes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanCISupportedMeasTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanCISupportedMeasTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanCOSupportedOutputTypes ( const char physicalChannel [], int32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanCOSupportedOutputTypes'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'longPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSMfgID ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSMfgID'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSModelNum ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSModelNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSSerialNum ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSSerialNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSVersionNum ( const char physicalChannel [], uInt32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSVersionNum'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSVersionLetter ( const char physicalChannel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSVersionLetter'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSBitStream ( const char physicalChannel [], uInt8 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSBitStream'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPhysicalChanTEDSTemplateIDs ( const char physicalChannel [], uInt32 * data , uInt32 arraySizeInElements ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrulongThunk';fcns.name{fcnNum}='DAQmxGetPhysicalChanTEDSTemplateIDs'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedTaskAuthor ( const char taskName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPersistedTaskAuthor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedTaskAllowInteractiveEditing ( const char taskName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedTaskAllowInteractiveEditing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedTaskAllowInteractiveDeletion ( const char taskName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedTaskAllowInteractiveDeletion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedChanAuthor ( const char channel [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPersistedChanAuthor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedChanAllowInteractiveEditing ( const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedChanAllowInteractiveEditing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedChanAllowInteractiveDeletion ( const char channel [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedChanAllowInteractiveDeletion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedScaleAuthor ( const char scaleName [], char * data , uInt32 bufferSize ); 
fcns.thunkname{fcnNum}='longcstringcstringulongThunk';fcns.name{fcnNum}='DAQmxGetPersistedScaleAuthor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'ulong'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedScaleAllowInteractiveEditing ( const char scaleName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedScaleAllowInteractiveEditing'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetPersistedScaleAllowInteractiveDeletion ( const char scaleName [], bool32 * data ); 
fcns.thunkname{fcnNum}='longcstringvoidPtrThunk';fcns.name{fcnNum}='DAQmxGetPersistedScaleAllowInteractiveDeletion'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'cstring', 'ulongPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxGetSampClkTimingResponseMode ( TaskHandle taskHandle , int32 * data ); 
fcns.thunkname{fcnNum}='longuint64voidPtrThunk';fcns.name{fcnNum}='DAQmxGetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxSetSampClkTimingResponseMode ( TaskHandle taskHandle , int32 data ); 
fcns.thunkname{fcnNum}='longuint64longThunk';fcns.name{fcnNum}='DAQmxSetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64', 'long'};fcnNum=fcnNum+1;
% int32 __stdcall DAQmxResetSampClkTimingResponseMode ( TaskHandle taskHandle ); 
fcns.thunkname{fcnNum}='longuint64Thunk';fcns.name{fcnNum}='DAQmxResetSampClkTimingResponseMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'uint64'};fcnNum=fcnNum+1;
methodinfo=fcns;