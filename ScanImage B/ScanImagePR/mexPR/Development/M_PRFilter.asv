/*************************************************************
*
*    Multithreaded Binning of MultichannelData
*
*    Author: Peter Rupprecht 
*    Date: 13-08-2014
*
*******************************************************************/
 
#include "mex.h"
#include "math.h"
#include <windows.h>
#include <process.h>   

typedef struct{
    int ini;
    int fin;
    int  nb_lines;
    int  nb_pxls;
    int  nb_channels;
    int  binning;
    double * ima;
    double * y1;
    double * y2;
}myargument;

unsigned __stdcall ThreadFunc( void* pArguments )
{
    int ini,fin;
    double *ima,*y1,*y2;
    int nb_lines,nb_pxls,nb_channels,binning;
    myargument arg;
    arg=*(myargument *) pArguments;

    ini=arg.ini;    
    fin=arg.fin;
    ima=arg.ima;
    y1=arg.y1;
    y2=arg.y2;
    nb_lines=arg.nb_lines;
    nb_pxls=arg.nb_pxls;
    nb_channels=arg.nb_channels;
    binning=arg.binning;
           
    
    for(ii=ini; ii<fini; ii++) {
        for(hh=0; hh<pxls; hh++) {
            for (kk=0; kk<binning;kk++) {
                y1[ii * lines + hh] = y1[ii * lines + hh] + x[ii* pxls*binning*nbchan  + 0 + kk*nbchan + binning*nbchan*hh]/binning;
                y2[ii * lines + hh] = y2[ii * lines + hh] + x[ii * pxls*binning*nbchan + 1 + kk*nbchan + binning*nbchan*hh]/binning;
            }
        }
    }
    
    
    
    
//     printf('%d',binning);
    // bilateral filter 
    
    
    
//     for(i=ini;i<fin;i++) 
//     for(j=0;j<cols;j++) 
//     {
//         for(ii=0;ii<v;ii++) 
//         for(jj=-v;jj<v;jj++)
//         {
//             ni=i+ii;
//             nj=j+jj;
//             if(ii==0 && jj==0) continue;
//             if(ni>=0 && nj>=0 && ni<cols && nj<rows)
//             {                
//                 d=(ima[nj*cols+ni]-ima[j*cols+i]);
// 				d=d*d;
//                 w=exp(-(ii*ii+jj*jj)/(2*sigS*sigS)+(-d/(2*sigI*sigI)));
//                 
//                 // symmetric weight computation
//                 
//                 fima[j*cols+i]  += w*ima[nj*cols+ni];
//                 weight[j*cols+i]+= w;
//                 
//                 fima[nj*cols+ni]  += w*ima[j*cols+i];
//                 weight[nj*cols+ni]+= w;
//             }
//         }
//     }

    _endthreadex( 0 );
    return 0;
} 

void mexFunction( int nlhs, mxArray *plhs[],int nrhs, const mxArray*prhs[] )     
{    
    int i,Nthreads,ini,fin,rows,cols;
    double *ima,*y1,*y2;
    int nb_lines,nb_pxls,nb_channels,binning;
    
    myargument *ThreadArgs;  
    HANDLE *ThreadList; // Handles to the worker threads           
    
    if(nrhs<5)
    {
        printf("Error: Wrong number of arguments! Must be 5\r");
        return;
    }
   
    /*Get image*/
    ima = mxGetPr(prhs[0]);    
    rows=mxGetM(prhs[0]);
    cols=mxGetN(prhs[0]);
    
    /*Get the Integer*/
    nb_lines =  (int) mxGetScalar(prhs[1]);
    nb_pxls =  (int) mxGetScalar(prhs[2]);
    nb_channels = (int)  mxGetScalar(prhs[3]);
    binning =  (int) mxGetScalar(prhs[4]);
    /* get number of threads*/
    Nthreads = (int) mxGetScalar(prhs[5]);


    /*Allocate memory and assign output pointer*/
//     plhs[0] = mxCreateNumericArray( nb_pxls,nb_lines,mxDOUBLE_CLASS, mxREAL);
//     plhs[1] = mxCreateNumericArray(nb_pxls,nb_lines,mxDOUBLE_CLASS, mxREAL);
    plhs[0] = mxCreateDoubleMatrix(nb_pxls,nb_lines, mxREAL);
    plhs[1] = mxCreateDoubleMatrix(nb_pxls,nb_lines, mxREAL);
    y1 = mxGetPr(plhs[0]);      
    y2 = mxGetPr(plhs[1]);      
    
    
    // Reserve room for handles of threads in ThreadList
	ThreadList = (HANDLE*)malloc(Nthreads* sizeof( HANDLE ));
	ThreadArgs = (myargument*) malloc( Nthreads*sizeof(myargument));
	
    for (i=0; i<Nthreads; i++)
    {       
	// Make Thread Structure
    ini=(i*nb_lines)/Nthreads;
    fin=((i+1)*nb_lines)/Nthreads;
    
    ThreadArgs[i].nb_lines=nb_lines;
	ThreadArgs[i].nb_pxls=nb_pxls;
    ThreadArgs[i].ima=ima;
	ThreadArgs[i].y1=y1;
    ThreadArgs[i].y2=y2;
    ThreadArgs[i].nb_channels=nb_channels;
    ThreadArgs[i].binning=binning;    
    ThreadArgs[i].ini=ini;
    ThreadArgs[i].fin=fin;
  }
    
  for (i=0; i<Nthreads; i++) { WaitForSingleObject(ThreadList[i], INFINITE); }
  for (i=0; i<Nthreads; i++) { CloseHandle( ThreadList[i] ); }
    
  free(ThreadArgs); 
  free(ThreadList);

//   for(i=0;i<dims[0]*dims[1];i++) fima[i]/=weight[i];
        
  return;
}
